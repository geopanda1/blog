[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "test",
    "section": "",
    "text": "Demo of something\n\n\n\n\n\n\n\n\n\n\n\n\nApr 8, 2025\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 7, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nGeosphere Download Package\n\n\n\n\n\n\n\npython-package\n\n\n\n\n\n\n\n\n\n\n\nApr 7, 2025\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "code-snippets.html",
    "href": "code-snippets.html",
    "title": "Code snippets",
    "section": "",
    "text": "Various pieces of code I regularily use."
  },
  {
    "objectID": "code-snippets/dask/00_local-cluster.html",
    "href": "code-snippets/dask/00_local-cluster.html",
    "title": "Local cluster",
    "section": "",
    "text": "How to setup a local dask cluster.\nfor i in range(10):\n    print(i)"
  },
  {
    "objectID": "code-snippets/sqlalchemy/00_relations.html",
    "href": "code-snippets/sqlalchemy/00_relations.html",
    "title": "Relations",
    "section": "",
    "text": "How do define relationships without explicitly setting foreign keys.\n\nimport sqlalchemy as db\n\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.orm import declarative_base, relationship, Session\nBase = declarative_base()\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    products = relationship(\"Product\", back_populates=\"user\")\n\nclass Product(Base):\n    __tablename__ = \"product\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    user_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\n    user = relationship(\"User\", back_populates=\"products\")\n\n\ndb_path = \"sqlite:///test.db\"\nengine = db.create_engine(db_path)\nBase.metadata.create_all(engine, checkfirst=True)\n\nsession = Session(bind=engine)\n# enforce foreign key constraint in SQLite (off by default!)\nsession.execute(text(\"PRAGMA foreign_keys=on\"));\n\n\nuser = User(name=\"Alice\")\nproduct1 = Product(name=\"A\", user=user)\nproduct2 = Product(name=\"B\", user=user)\n\nsession.add(user)\nsession.commit()\n\nForeign key will be correctly assigned by sqlalchemy:\n\nproduct1.user_id\n\n1\n\n\nWorks also the other way round:\n\nuser = User(name=\"Kyle\")\nproduct3 = Product(name=\"A\")\nproduct4 = Product(name=\"B\")\n\nuser.products = [product3, product4]\n\nsession.add(user)\nsession.commit()\n\nForeign key will be correctly assigned by sqlalchemy:\n\nproduct3.user_id\n\n2\n\n\n\nThis does not work\nThe associated user.id will not be set correctly. It will be set to None which is the current value of user.id prior to committing.\n\nuser = User(name=\"Dave\")\n\nproduct5 = Product(name=\"C\", user_id=user.id) # user.id is None at this point!\nproduct6 = Product(name=\"D\", user_id=user.id)\n\nsession.add_all([user, product5, product6])\nsession.commit()\n\nIntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: product.user_id\n[SQL: INSERT INTO product (name, user_id) VALUES (?, ?) RETURNING id]\n[parameters: ('C', None)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)"
  },
  {
    "objectID": "code-snippets/sqlalchemy/01_views.html",
    "href": "code-snippets/sqlalchemy/01_views.html",
    "title": "View with model",
    "section": "",
    "text": "How do create a view with a proper model."
  },
  {
    "objectID": "code-snippets/xarray/00_stack.html",
    "href": "code-snippets/xarray/00_stack.html",
    "title": "Stack (reshape)",
    "section": "",
    "text": "How to reshape a multidimensional xarray object.\nimport xarray as xr\n\nds = xr.Dataset(...)\n\n\nds_flat = ds.stack(sample=(\"x\", \"y\"))"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\nfor i in range(10):\n    print(i)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/geosphere-download/index.html",
    "href": "posts/geosphere-download/index.html",
    "title": "Demo of something",
    "section": "",
    "text": "This package is meant to facilitate download meteorological data from the Geosphere (formerly ZAMG) Austria data hub.\nPackage link\n\nfrom pathlib import Path\nimport os\n\n\nprint(os.system(\"python --version\"))\n\nPython 3.13.1\n0"
  },
  {
    "objectID": "posts/new-post/other.html",
    "href": "posts/new-post/other.html",
    "title": "Geosphere Download Package",
    "section": "",
    "text": "Download package for station data from geosphere austria\nfor i in range(10):\n    print(i)"
  }
]