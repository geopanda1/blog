[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "LWD Tirol Meteo Download Package\n\n\n\n\n\n\n\npython-package\n\n\ndata-download\n\n\n\n\n\n\n\n\n\n\n\nApr 8, 2025\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 7, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nGeosphere Download Package\n\n\n\n\n\n\n\npython-package\n\n\n\n\n\n\n\n\n\n\n\nApr 7, 2025\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2025\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "code-snippets.html",
    "href": "code-snippets.html",
    "title": "Code snippets",
    "section": "",
    "text": "Various pieces of code I regularily use."
  },
  {
    "objectID": "code-snippets/dask/00_local-cluster.html",
    "href": "code-snippets/dask/00_local-cluster.html",
    "title": "Local cluster",
    "section": "",
    "text": "How to setup a local dask cluster.\nfor i in range(10):\n    print(i)"
  },
  {
    "objectID": "code-snippets/sqlalchemy/00_relations.html",
    "href": "code-snippets/sqlalchemy/00_relations.html",
    "title": "Relations",
    "section": "",
    "text": "How do define relationships without explicitly setting foreign keys.\n\nimport sqlalchemy as db\n\nfrom sqlalchemy import create_engine, text\nfrom sqlalchemy.orm import declarative_base, relationship, Session\nBase = declarative_base()\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    products = relationship(\"Product\", back_populates=\"user\")\n\nclass Product(Base):\n    __tablename__ = \"product\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String)\n    user_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\n    user = relationship(\"User\", back_populates=\"products\")\n\n\ndb_path = \"sqlite:///test.db\"\nengine = db.create_engine(db_path)\nBase.metadata.create_all(engine, checkfirst=True)\n\nsession = Session(bind=engine)\n# enforce foreign key constraint in SQLite (off by default!)\nsession.execute(text(\"PRAGMA foreign_keys=on\"));\n\n\nuser = User(name=\"Alice\")\nproduct1 = Product(name=\"A\", user=user)\nproduct2 = Product(name=\"B\", user=user)\n\nsession.add(user)\nsession.commit()\n\nForeign key will be correctly assigned by sqlalchemy:\n\nproduct1.user_id\n\n1\n\n\nWorks also the other way round:\n\nuser = User(name=\"Kyle\")\nproduct3 = Product(name=\"A\")\nproduct4 = Product(name=\"B\")\n\nuser.products = [product3, product4]\n\nsession.add(user)\nsession.commit()\n\nForeign key will be correctly assigned by sqlalchemy:\n\nproduct3.user_id\n\n2\n\n\n\nThis does not work\nThe associated user.id will not be set correctly. It will be set to None which is the current value of user.id prior to committing.\n\nuser = User(name=\"Dave\")\n\nproduct5 = Product(name=\"C\", user_id=user.id) # user.id is None at this point!\nproduct6 = Product(name=\"D\", user_id=user.id)\n\nsession.add_all([user, product5, product6])\nsession.commit()\n\nIntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: product.user_id\n[SQL: INSERT INTO product (name, user_id) VALUES (?, ?) RETURNING id]\n[parameters: ('C', None)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)"
  },
  {
    "objectID": "code-snippets/sqlalchemy/01_views.html",
    "href": "code-snippets/sqlalchemy/01_views.html",
    "title": "View with model",
    "section": "",
    "text": "How do create a view with a proper model. tbc"
  },
  {
    "objectID": "code-snippets/xarray/00_stack.html",
    "href": "code-snippets/xarray/00_stack.html",
    "title": "Stack (reshape)",
    "section": "",
    "text": "How to reshape a multidimensional xarray object.\nimport xarray as xr\n\nds = xr.Dataset(...)\n\n\nds_flat = ds.stack(sample=(\"x\", \"y\"))"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\nfor i in range(10):\n    print(i)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/geosphere-download/index.html",
    "href": "posts/geosphere-download/index.html",
    "title": "LWD Tirol Meteo Download Package",
    "section": "",
    "text": "This package is meant to facilitate download meteorological data from the Geosphere (formerly ZAMG) Austria data hub.\nPackage link\n\nfrom pathlib import Path\nimport os\n\n\nprint(os.system(\"python --version\"))\n\nPython 3.13.1\n0"
  },
  {
    "objectID": "posts/new-post/other.html",
    "href": "posts/new-post/other.html",
    "title": "Geosphere Download Package",
    "section": "",
    "text": "Download package for station data from geosphere austria\nfor i in range(10):\n    print(i)"
  },
  {
    "objectID": "code-snippets/dask/00_local_cluster.html",
    "href": "code-snippets/dask/00_local_cluster.html",
    "title": "Local cluster",
    "section": "",
    "text": "import multiprocessing\nfrom dask.distributed import Client, LocalCluster"
  },
  {
    "objectID": "code-snippets/dask/00_local_cluster.html#setup-up-local-dask-cluster",
    "href": "code-snippets/dask/00_local_cluster.html#setup-up-local-dask-cluster",
    "title": "Local cluster",
    "section": "Setup up local dask cluster",
    "text": "Setup up local dask cluster\n\npossibly adjust number of threads per worker\ndon’t forget to put the Client(...) in a if __name__ == \"__main__\" context when running from a script\n\n\nn_workers = multiprocessing.cpu_count()\n\nmem_buffer = 10 # how much memory will be spared from workers\n\ngb_total = 128 # total memory of machine\ngb_available = gb_total - mem_buffer # what is left for dask\ngb_per_worker = int(gb_total / n_workers) # memory for each dask worker\n\n\nclient = Client(\n    address=LocalCluster(\n        n_workers=n_workers,\n        threads_per_worker=2,\n        interface=\"lo\",\n        memory_limit=f\"{gb_per_worker}GB\",\n    )\n)\n\nInspect link to view dashboard\n\nprint(client.dashboard_link)\n\nhttp://127.0.0.1:8787/status"
  },
  {
    "objectID": "code-snippets/xarray/03_resampling_rioxarray.html",
    "href": "code-snippets/xarray/03_resampling_rioxarray.html",
    "title": "Resampling rioxarray",
    "section": "",
    "text": "tbc"
  },
  {
    "objectID": "code-snippets/xarray/00_rf_predict_apply_ufunc.html",
    "href": "code-snippets/xarray/00_rf_predict_apply_ufunc.html",
    "title": "xr.apply_ufunc(…)",
    "section": "",
    "text": "Note: ds.map_blocks() likely is a lot faster compared to this version! This is really only for demonstrative purpose.\n\nimport dask.array as da\nimport xarray as xr\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier as RF\n\n\nn_features = 12\n\n\nn_samples = 1000\n# random training data\nX_train = da.random.random((n_samples,n_features))\ny_train = da.random.randint(0, 2, n_samples)\n\nrf = RF(random_state = 42, n_estimators=50, n_jobs=-1)\nrf.fit(X_train, y_train)\n\nRandomForestClassifier(n_estimators=50, n_jobs=-1, random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_estimators=50, n_jobs=-1, random_state=42) \n\n\n\n# random training data\n# keep size reasonably small\nlat = np.arange(40)\nlon = np.arange(60)\ntime = np.arange(n_features)\ndata = da.random.random((lat.size,lon.size, time.size))\n\n\nds = xr.DataArray(\n    data,\n    coords=[lat, lon, time],\n    dims=[\"lat\", \"lon\", \"time\"],\n    name=\"test\",\n).to_dataset()\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 231kB\nDimensions:  (lat: 40, lon: 60, time: 12)\nCoordinates:\n  * lat      (lat) int64 320B 0 1 2 3 4 5 6 7 8 9 ... 31 32 33 34 35 36 37 38 39\n  * lon      (lon) int64 480B 0 1 2 3 4 5 6 7 8 9 ... 51 52 53 54 55 56 57 58 59\n  * time     (time) int64 96B 0 1 2 3 4 5 6 7 8 9 10 11\nData variables:\n    test     (lat, lon, time) float64 230kB dask.array<chunksize=(40, 60, 12), meta=np.ndarray>xarray.DatasetDimensions:lat: 40lon: 60time: 12Coordinates: (3)lat(lat)int640 1 2 3 4 5 6 ... 34 35 36 37 38 39array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39])lon(lon)int640 1 2 3 4 5 6 ... 54 55 56 57 58 59array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59])time(time)int640 1 2 3 4 5 6 7 8 9 10 11array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])Data variables: (1)test(lat, lon, time)float64dask.array<chunksize=(40, 60, 12), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         225.00 kiB \n                         225.00 kiB \n                    \n                    \n                    \n                         Shape \n                         (40, 60, 12) \n                         (40, 60, 12) \n                    \n                    \n                         Dask graph \n                         1 chunks in 1 graph layer \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  12\n  60\n  40\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39],\n      dtype='int64', name='lat'))lonPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59],\n      dtype='int64', name='lon'))timePandasIndexPandasIndex(Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], dtype='int64', name='time'))Attributes: (0)\n\n\n\ndef generic_func(arr):\n    return rf.predict(arr.reshape(1, -1))\n\n\nds_ag = xr.apply_ufunc(\n    generic_func,\n    ds,\n    input_core_dims=[[\"time\"]],\n    dask=\"parallelized\",\n    output_dtypes=np.float32,\n    vectorize=True,\n    dask_gufunc_kwargs={\"allow_rechunk\": True},\n)\n\n\nds_ag\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 10kB\nDimensions:  (lat: 40, lon: 60)\nCoordinates:\n  * lat      (lat) int64 320B 0 1 2 3 4 5 6 7 8 9 ... 31 32 33 34 35 36 37 38 39\n  * lon      (lon) int64 480B 0 1 2 3 4 5 6 7 8 9 ... 51 52 53 54 55 56 57 58 59\nData variables:\n    test     (lat, lon) float32 10kB dask.array<chunksize=(40, 60), meta=np.ndarray>xarray.DatasetDimensions:lat: 40lon: 60Coordinates: (2)lat(lat)int640 1 2 3 4 5 6 ... 34 35 36 37 38 39array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39])lon(lon)int640 1 2 3 4 5 6 ... 54 55 56 57 58 59array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59])Data variables: (1)test(lat, lon)float32dask.array<chunksize=(40, 60), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         9.38 kiB \n                         9.38 kiB \n                    \n                    \n                    \n                         Shape \n                         (40, 60) \n                         (40, 60) \n                    \n                    \n                         Dask graph \n                         1 chunks in 4 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  60\n  40\n\n        \n    \nIndexes: (2)latPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39],\n      dtype='int64', name='lat'))lonPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59],\n      dtype='int64', name='lon'))Attributes: (0)\n\n\n\nds_ag.compute()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 10kB\nDimensions:  (lat: 40, lon: 60)\nCoordinates:\n  * lat      (lat) int64 320B 0 1 2 3 4 5 6 7 8 9 ... 31 32 33 34 35 36 37 38 39\n  * lon      (lon) int64 480B 0 1 2 3 4 5 6 7 8 9 ... 51 52 53 54 55 56 57 58 59\nData variables:\n    test     (lat, lon) float32 10kB 0.0 1.0 1.0 0.0 0.0 ... 1.0 1.0 1.0 1.0 1.0xarray.DatasetDimensions:lat: 40lon: 60Coordinates: (2)lat(lat)int640 1 2 3 4 5 6 ... 34 35 36 37 38 39array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39])lon(lon)int640 1 2 3 4 5 6 ... 54 55 56 57 58 59array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59])Data variables: (1)test(lat, lon)float320.0 1.0 1.0 0.0 ... 1.0 1.0 1.0 1.0array([[0., 1., 1., ..., 1., 0., 1.],\n       [1., 0., 0., ..., 1., 0., 0.],\n       [0., 1., 1., ..., 0., 1., 0.],\n       ...,\n       [0., 0., 1., ..., 0., 1., 1.],\n       [1., 0., 0., ..., 1., 1., 1.],\n       [0., 0., 0., ..., 1., 1., 1.]], shape=(40, 60), dtype=float32)Indexes: (2)latPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39],\n      dtype='int64', name='lat'))lonPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59],\n      dtype='int64', name='lon'))Attributes: (0)"
  },
  {
    "objectID": "code-snippets/xarray/02_resample_custom_func.html",
    "href": "code-snippets/xarray/02_resample_custom_func.html",
    "title": "Temporal resampling/aggregation",
    "section": "",
    "text": "import xarray as xr\nimport numpy as np\nimport pandas as pd\n\nfrom util import generate_3d_dataset"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html",
    "title": "Lazy resampling",
    "section": "",
    "text": "import sys\nimport numpy as np\nimport xarray as xr\nfrom rasterio.enums import Resampling\nimport odc.geo\nfrom odc.geo.xr import xr_reproject\nfrom odc.geo.geobox import GeoBox, BoundingBox\n\n\nprint(sys.version)\nprint(xr.__version__)\nprint(odc.geo.__version__)\n\n3.13.1 | packaged by conda-forge | (main, Dec  5 2024, 21:23:54) [GCC 13.3.0]\n2025.3.1\n0.4.10\n\n\nThe following function is only to simluate that the crs, while initially present on the opened dataset, can get lost easily along the way in workflows, leading to the reprojection to fail. This is not a shortcoming of xarray or xr_reproject, but I want to document it, as this happened to me several times before.\n\ndef replace_2_by_0(da: xr.DataArray) -> xr.DataArray:\n    \"\"\"Replace 2s by 0\"\"\"\n    return da.where(da != 2, 0)\n\n\nds_webcam = xr.open_zarr(\"./data/webcam_snow_cover.zarr\")\n\n\nds_webcam[\"nodata\"] = np.nan"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-computation-on-dataset---this-leads-to-the-spatial-ref-getting-lost",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-computation-on-dataset---this-leads-to-the-spatial-ref-getting-lost",
    "title": "Dask-backed (lazy) resampling",
    "section": "Perform computation on dataset - this leads to the spatial ref getting lost…",
    "text": "Perform computation on dataset - this leads to the spatial ref getting lost…\n\n# snow cover as 0 and 1\nsnow_cover = webcam_to_01(ds_webcam.snow_cover)"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html#setting-crs-for-spatial_ref",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html#setting-crs-for-spatial_ref",
    "title": "Dask-backed (lazy) resampling",
    "section": "Setting crs for spatial_ref",
    "text": "Setting crs for spatial_ref\n\nif snow_cover.odc.geobox.crs is None:\n    print(\"Dataset's missing the crs\")\n\nDataset's missing the crs\n\n\n\n# this makes .spatial_ref and .geobox available (actually .geobox is added by datacube)\n# (not sufficient anymore)\n# snow_cover.rio.write_crs(\"epsg:25832\", inplace=True)\n\n\n# (not sufficient anymore)\n# snow_cover[\"spatial_ref\"] = ds_webcam.spatial_ref\n\n\nsnow_cover = snow_cover.odc.assign_crs(25832)\n\n\nassert snow_cover.odc.crs"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-actual-resampling",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-actual-resampling",
    "title": "Dask-backed (lazy) resampling",
    "section": "Perform actual resampling",
    "text": "Perform actual resampling\n\nsnow_cover_downsampled = xr_reproject(snow_cover, geobox, resampling=Resampling.mode)\n\n\nsnow_cover_downsampled.plot()\n\n<matplotlib.collections.QuadMesh at 0x7166d43f1010>"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-computation-on-dataset---this-often-leads-to-some-part-of-the-spatial-ref-getting-lost",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-computation-on-dataset---this-often-leads-to-some-part-of-the-spatial-ref-getting-lost",
    "title": "Dask-backed (lazy) resampling",
    "section": "Perform computation on dataset - this often leads to some part of the spatial ref getting lost…",
    "text": "Perform computation on dataset - this often leads to some part of the spatial ref getting lost…\n\n# snow cover as 0 and 1\nsnow_cover = webcam_to_01(ds_webcam.snow_cover)"
  },
  {
    "objectID": "code-snippets/xarray/01_rf_predict_map_blocks.html",
    "href": "code-snippets/xarray/01_rf_predict_map_blocks.html",
    "title": "ds.map_blocks(…)",
    "section": "",
    "text": "This is the preferred version for chunk-wise processing of an xarray.Dataset\n\nimport dask.array as da\nimport xarray as xr\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier as RF\n\n\nn_features = 50\n\n\nn_samples = 1000\n# random training data\nX_train = da.random.random((n_samples, n_features))\ny_train = da.random.randint(0, 2, n_samples)\n\nrf = RF(random_state=42, n_estimators=50, n_jobs=-1)\nrf.fit(X_train, y_train)\n\n\n# random training data\nlat = np.arange(4000)\nlon = np.arange(6000)\ntime = np.arange(n_features)\ndata = da.random.random((lat.size, lon.size, time.size))\n\n\nds = xr.DataArray(\n    data, coords=[lat, lon, time], dims=[\"lat\", \"lon\", \"time\"], name=\"test\"\n).to_dataset()\n\n\ndef generic_func(ds: xr.Dataset):\n    ds_stacked = ds.stack(ml=(\"lat\", \"lon\")).transpose(\"ml\", \"time\")\n\n    # predict on input data\n    X = ds_stacked.test.data\n    y_hat_1d = rf.predict(X)\n    y_hat_2d = y_hat_1d.reshape((ds.lat.size, ds.lon.size))\n\n    data_out = ds.isel(time=[0]).squeeze().copy(deep=True)\n    data_out.test.data = y_hat_2d\n\n    return data_out\n\n\nds_pred = ds.map_blocks(generic_func, template=ds.isel(time=[0]).squeeze())\n\n\nds_pred\n\n\nds_pred = ds_pred.compute()"
  },
  {
    "objectID": "code-snippets/xarray/00_rf_predict_map_blocks.html",
    "href": "code-snippets/xarray/00_rf_predict_map_blocks.html",
    "title": "ds.map_blocks(…)",
    "section": "",
    "text": ".map_blocks(...) applies a function to chunks of a dask-backed xarray.Dataset.\n\nimport sys\n\nimport dask\nimport xarray as xr\nimport numpy as np\nimport sklearn\nfrom sklearn.ensemble import RandomForestClassifier as RF\n\nfrom util import generate_X_y, generate_3d_dataset\n\n\nprint(sys.version)\nprint(dask.__version__)\nprint(xr.__version__)\nprint(np.__version__)\nprint(sklearn.__version__)\n\n3.13.1 | packaged by conda-forge | (main, Dec  5 2024, 21:23:54) [GCC 13.3.0]\n2025.4.0\n2025.3.1\n2.2.0\n1.6.0"
  },
  {
    "objectID": "code-snippets/xarray/01_rf_predict_apply_ufunc.html",
    "href": "code-snippets/xarray/01_rf_predict_apply_ufunc.html",
    "title": "xr.apply_ufunc(…)",
    "section": "",
    "text": "Note: ds.map_blocks() likely is faster compared to this approach. This is really only for demonstrative purpose, as a template to be adapted for other computations.\n\nimport sys\n\nimport xarray as xr\nimport numpy as np\nimport dask\nimport sklearn\nfrom sklearn.ensemble import RandomForestClassifier as RF\n\nfrom util import generate_X_y, generate_3d_dataset\n\n\nprint(sys.version)\nprint(dask.__version__)\nprint(xr.__version__)\nprint(np.__version__)\nprint(sklearn.__version__)\n\n3.13.1 | packaged by conda-forge | (main, Dec  5 2024, 21:23:54) [GCC 13.3.0]\n2025.4.0\n2025.3.1\n2.2.0\n1.6.0"
  },
  {
    "objectID": "code-snippets/joblib/00_parallel_everything.html",
    "href": "code-snippets/joblib/00_parallel_everything.html",
    "title": "Multithreading and -processing with joblib",
    "section": "",
    "text": "from joblib import Parallel, delayed\n\nCreate a function to be executed in parallel:\n\ndef my_embarassingly_parallel_job(arg):\n    # perform work...\n    return\n\nUses the default “loky” backend for process based parallelism:\n\nresults = Parallel(n_jobs=2)(\n    delayed(my_embarassingly_parallel_job)(i) for i in range(10)\n)\n\nThread-based parallelism:\n\nresults = Parallel(n_jobs=2, prefer=\"threads\")(\n    delayed(my_embarassingly_parallel_job)(i) for i in range(10)\n)"
  },
  {
    "objectID": "code-snippets/requests/00_get_request.html",
    "href": "code-snippets/requests/00_get_request.html",
    "title": "requests module",
    "section": "",
    "text": "import requests\n\nurl = \"....\"\n\nr = requests.get(url)\n\n# retrieve status code\nr.status_code \n\n# retrieve json formatted response\nr.json()\n\n# write non-binary output\nwith (\"out-file.txt\", \"w\") as fobj:\n    fobj.write(r.content)\n\n\n# write binary output (e.g., for zip-files and other binary formats)\nwith (\"out-file\", \"wb\") as fobj:\n    fobj.write(r.content)\nRecursive request in case of non-successful return code:\n\nurl = \"....\"\n\ndef request_until_success(url):\n    r = requests.get(url)\n\n    if r. status_code != 200:\n        # possibly delay renewed requests here ...\n\n        return request_until_success(url)\n\n    return r"
  },
  {
    "objectID": "code-snippets/data-download/00_download_s2_stac_asset.html",
    "href": "code-snippets/data-download/00_download_s2_stac_asset.html",
    "title": "stac-asset",
    "section": "",
    "text": "requires installation of the stac-asset library\n\nquickly download stac items via python interface or command line\n\n\nimport os\nfrom pathlib import Path\n\nfrom pystac_client import Client\nimport planetary_computer\n\nfrom bounding_box import lon_min, lat_min, lon_max, lat_max\n\n\ndata_dir = Path(\"./\")\nout_dir = data_dir / \"s2_data_stac-asset\"\nout_dir.mkdir()"
  },
  {
    "objectID": "code-snippets/data-download/00_download_s2_stac_asset.html#how-to-find-some-items",
    "href": "code-snippets/data-download/00_download_s2_stac_asset.html#how-to-find-some-items",
    "title": "stac-asset",
    "section": "How to find some items",
    "text": "How to find some items\n\ncatalog = Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,  # not strictly necessary for finding the items!\n)\n\nquery = catalog.search(\n    collections=[\"sentinel-2-l2a\"],\n    bbox=[lon_min, lat_min, lon_max, lat_max],\n    datetime=\"2024-07-01/2024-07-30\",\n    query={\n        \"eo:cloud_cover\": {\"lt\": 20},\n    },\n)\n\nitems = list(query.items())\nprint(f\"Found: {len(items):d} datasets\")\n\nFound: 4 datasets\n\n\n\nlink_to_item = items[0].links[3].href\n\nprint(link_to_item)\n\nhttps://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a/items/S2A_MSIL2A_20240729T102021_R065_T32TPS_20240729T194952\n\n\n\n# resides in dedicated environment to avoid dependency conflicts\nstac_asset_path = \"/home/<user>/miniconda3/envs/stac/bin/stac-asset\"\n\n\ncmd = f\"{stac_asset_path} download {link_to_item} {out_dir}\"\n\n\nos.system(cmd)\n\n22/23: 100%|█████████▉| 1.74G/1.74G [00:50<00:00, 12.6MB/s, 0 errors]\n\n\n{\"type\": \"Feature\", \"stac_version\": \"1.0.0\", \"stac_extensions\": [\"https://stac-extensions.github.io/eo/v1.0.0/schema.json\", \"https://stac-extensions.github.io/sat/v1.0.0/schema.json\", \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\"], \"id\": \"S2A_MSIL2A_20240729T102021_R065_T32TPS_20240729T194952\", \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[11.7520729, 46.8502664], [11.6924991, 46.7092583], [11.6277754, 46.564301], [11.5660321, 46.4186793], [11.5041944, 46.2732403], [11.4406416, 46.1284109], [11.3787445, 45.983333], [11.3613307, 45.9395307], [10.2904841, 45.9582645], [10.3140353, 46.9461683], [11.7555849, 46.9205364], [11.7520729, 46.8502664]]]}, \"bbox\": [10.2904841, 45.9395307, 11.7555849, 46.9461683], \"properties\": {\"datetime\": \"2024-07-29T10:20:21.025000Z\", \"platform\": \"Sentinel-2A\", \"proj:epsg\": 32632, \"instruments\": [\"msi\"], \"s2:mgrs_tile\": \"32TPS\", \"constellation\": \"Sentinel 2\", \"s2:granule_id\": \"S2A_OPER_MSI_L2A_TL_2APS_20240729T194952_A047538_T32TPS_N05.11\", \"eo:cloud_cover\": 16.663046, \"s2:datatake_id\": \"GS2A_20240729T102021_047538_N05.11\", \"s2:product_uri\": \"S2A_MSIL2A_20240729T102021_N0511_R065_T32TPS_20240729T194952.SAFE\", \"s2:datastrip_id\": \"S2A_OPER_MSI_L2A_DS_2APS_20240729T194952_S20240729T102559_N05.11\", \"s2:product_type\": \"S2MSI2A\", \"sat:orbit_state\": \"descending\", \"s2:datatake_type\": \"INS-NOBS\", \"s2:generation_time\": \"2024-07-29T19:49:52.000000Z\", \"sat:relative_orbit\": 65, \"s2:water_percentage\": 0.341176, \"s2:mean_solar_zenith\": 30.0395059052058, \"s2:mean_solar_azimuth\": 153.55374565552, \"s2:processing_baseline\": \"05.11\", \"s2:snow_ice_percentage\": 1.480092, \"s2:vegetation_percentage\": 63.926095, \"s2:thin_cirrus_percentage\": 0.036718, \"s2:cloud_shadow_percentage\": 1.713186, \"s2:nodata_pixel_percentage\": 11.29414, \"s2:unclassified_percentage\": 0.794875, \"s2:not_vegetated_percentage\": 12.102448, \"s2:degraded_msi_data_percentage\": 0.0256, \"s2:high_proba_clouds_percentage\": 9.40951, \"s2:reflectance_conversion_factor\": 0.969413241562976, \"s2:medium_proba_clouds_percentage\": 7.216818, \"s2:saturated_defective_pixel_percentage\": 0.0}, \"links\": [{\"rel\": \"collection\", \"href\": \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a\", \"type\": \"application/json\"}, {\"rel\": \"parent\", \"href\": \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a\", \"type\": \"application/json\"}, {\"rel\": \"root\", \"href\": \"https://planetarycomputer.microsoft.com/api/stac/v1/\", \"type\": \"application/json\"}, {\"rel\": \"license\", \"href\": \"https://sentinel.esa.int/documents/247904/690755/Sentinel_Data_Legal_Notice\"}, {\"rel\": \"preview\", \"href\": \"https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=sentinel-2-l2a&item=S2A_MSIL2A_20240729T102021_R065_T32TPS_20240729T194952\", \"type\": \"text/html\", \"title\": \"Map of item\"}, {\"rel\": \"derived_from\", \"href\": \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a/items/S2A_MSIL2A_20240729T102021_R065_T32TPS_20240729T194952\"}], \"assets\": {\"AOT\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_AOT_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Aerosol optical thickness (AOT)\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"roles\": [\"data\"]}, \"B01\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B01_60m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 1 - Coastal aerosol - 60m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [1830, 1830], \"proj:transform\": [60.0, 0.0, 600000.0, 0.0, -60.0, 5200020.0], \"gsd\": 60.0, \"eo:bands\": [{\"name\": \"B01\", \"common_name\": \"coastal\", \"description\": \"Band 1 - Coastal aerosol\", \"center_wavelength\": 0.443, \"full_width_half_max\": 0.027}], \"roles\": [\"data\"]}, \"B02\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B02_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 2 - Blue - 10m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B02\", \"common_name\": \"blue\", \"description\": \"Band 2 - Blue\", \"center_wavelength\": 0.49, \"full_width_half_max\": 0.098}], \"roles\": [\"data\"]}, \"B03\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B03_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 3 - Green - 10m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B03\", \"common_name\": \"green\", \"description\": \"Band 3 - Green\", \"center_wavelength\": 0.56, \"full_width_half_max\": 0.045}], \"roles\": [\"data\"]}, \"B04\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B04_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 4 - Red - 10m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B04\", \"common_name\": \"red\", \"description\": \"Band 4 - Red\", \"center_wavelength\": 0.665, \"full_width_half_max\": 0.038}], \"roles\": [\"data\"]}, \"B05\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B05_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 5 - Vegetation red edge 1 - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B05\", \"common_name\": \"rededge\", \"description\": \"Band 5 - Vegetation red edge 1\", \"center_wavelength\": 0.704, \"full_width_half_max\": 0.019}], \"roles\": [\"data\"]}, \"B06\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B06_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 6 - Vegetation red edge 2 - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B06\", \"common_name\": \"rededge\", \"description\": \"Band 6 - Vegetation red edge 2\", \"center_wavelength\": 0.74, \"full_width_half_max\": 0.018}], \"roles\": [\"data\"]}, \"B07\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B07_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 7 - Vegetation red edge 3 - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B07\", \"common_name\": \"rededge\", \"description\": \"Band 7 - Vegetation red edge 3\", \"center_wavelength\": 0.783, \"full_width_half_max\": 0.028}], \"roles\": [\"data\"]}, \"B08\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B08_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 8 - NIR - 10m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B08\", \"common_name\": \"nir\", \"description\": \"Band 8 - NIR\", \"center_wavelength\": 0.842, \"full_width_half_max\": 0.145}], \"roles\": [\"data\"]}, \"B09\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B09_60m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 9 - Water vapor - 60m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [1830, 1830], \"proj:transform\": [60.0, 0.0, 600000.0, 0.0, -60.0, 5200020.0], \"gsd\": 60.0, \"eo:bands\": [{\"name\": \"B09\", \"description\": \"Band 9 - Water vapor\", \"center_wavelength\": 0.945, \"full_width_half_max\": 0.026}], \"roles\": [\"data\"]}, \"B11\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B11_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 11 - SWIR (1.6) - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B11\", \"common_name\": \"swir16\", \"description\": \"Band 11 - SWIR (1.6)\", \"center_wavelength\": 1.61, \"full_width_half_max\": 0.143}], \"roles\": [\"data\"]}, \"B12\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B12_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 12 - SWIR (2.2) - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B12\", \"common_name\": \"swir22\", \"description\": \"Band 12 - SWIR (2.2)\", \"center_wavelength\": 2.19, \"full_width_half_max\": 0.242}], \"roles\": [\"data\"]}, \"B8A\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B8A_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 8A - Vegetation red edge 4 - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B8A\", \"common_name\": \"rededge\", \"description\": \"Band 8A - Vegetation red edge 4\", \"center_wavelength\": 0.865, \"full_width_half_max\": 0.033}], \"roles\": [\"data\"]}, \"SCL\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_SCL_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Scene classfication map (SCL)\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"roles\": [\"data\"]}, \"WVP\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_WVP_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Water vapour (WVP)\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"roles\": [\"data\"]}, \"visual\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_TCI_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"True color image\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B04\", \"common_name\": \"red\", \"description\": \"Band 4 - Red\", \"center_wavelength\": 0.665, \"full_width_half_max\": 0.038}, {\"name\": \"B03\", \"common_name\": \"green\", \"description\": \"Band 3 - Green\", \"center_wavelength\": 0.56, \"full_width_half_max\": 0.045}, {\"name\": \"B02\", \"common_name\": \"blue\", \"description\": \"Band 2 - Blue\", \"center_wavelength\": 0.49, \"full_width_half_max\": 0.098}], \"roles\": [\"data\"]}, \"safe-manifest\": {\"href\": \"s2_data_stac-asset/manifest.safe\", \"type\": \"application/xml\", \"title\": \"SAFE manifest\", \"roles\": [\"metadata\"]}, \"granule-metadata\": {\"href\": \"s2_data_stac-asset/MTD_TL.xml\", \"type\": \"application/xml\", \"title\": \"Granule metadata\", \"roles\": [\"metadata\"]}, \"inspire-metadata\": {\"href\": \"s2_data_stac-asset/INSPIRE.xml\", \"type\": \"application/xml\", \"title\": \"INSPIRE metadata\", \"roles\": [\"metadata\"]}, \"product-metadata\": {\"href\": \"s2_data_stac-asset/MTD_MSIL2A.xml\", \"type\": \"application/xml\", \"title\": \"Product metadata\", \"roles\": [\"metadata\"]}, \"datastrip-metadata\": {\"href\": \"s2_data_stac-asset/MTD_DS.xml\", \"type\": \"application/xml\", \"title\": \"Datastrip metadata\", \"roles\": [\"metadata\"]}, \"tilejson\": {\"href\": \"s2_data_stac-asset/tilejson.json\", \"type\": \"application/json\", \"title\": \"TileJSON with default rendering\", \"roles\": [\"tiles\"]}, \"rendered_preview\": {\"href\": \"s2_data_stac-asset/preview.png\", \"type\": \"image/png\", \"title\": \"Rendered preview\", \"rel\": \"preview\", \"roles\": [\"overview\"]}}, \"collection\": \"sentinel-2-l2a\"}\n\n\n                                                                     \n\n23/23: 100%|██████████| 1.74G/1.74G [00:51<00:00, 36.7MB/s, 0 errors]\n\n\n0"
  },
  {
    "objectID": "code-snippets/data-download/00_download_s2_stac_asset.html#query-some-items",
    "href": "code-snippets/data-download/00_download_s2_stac_asset.html#query-some-items",
    "title": "stac-asset",
    "section": "Query some items",
    "text": "Query some items\n\ncatalog = Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,  # not strictly necessary for finding the items!\n)\n\nquery = catalog.search(\n    collections=[\"sentinel-2-l2a\"],\n    bbox=[lon_min, lat_min, lon_max, lat_max],\n    datetime=\"2024-07-01/2024-07-30\",\n    query={\n        \"eo:cloud_cover\": {\"lt\": 20},\n    },\n)\n\nitems = list(query.items())\nprint(f\"Found: {len(items):d} datasets\")\n\nFound: 4 datasets\n\n\n\nlink_to_item = items[0].links[3].href\n\nprint(link_to_item)\n\nhttps://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a/items/S2A_MSIL2A_20240729T102021_R065_T32TPS_20240729T194952\n\n\n\n# resides in dedicated environment to avoid dependency conflicts\nstac_asset_path = \"/home/<user>/miniconda3/envs/stac/bin/stac-asset\"\n\n\ncmd = f\"{stac_asset_path} download {link_to_item} {out_dir}\"\n\n\nos.system(cmd)\n\n22/23: 100%|█████████▉| 1.74G/1.74G [00:50<00:00, 12.6MB/s, 0 errors]\n\n\n{\"type\": \"Feature\", \"stac_version\": \"1.0.0\", \"stac_extensions\": [\"https://stac-extensions.github.io/eo/v1.0.0/schema.json\", \"https://stac-extensions.github.io/sat/v1.0.0/schema.json\", \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\"], \"id\": \"S2A_MSIL2A_20240729T102021_R065_T32TPS_20240729T194952\", \"geometry\": {\"type\": \"Polygon\", \"coordinates\": [[[11.7520729, 46.8502664], [11.6924991, 46.7092583], [11.6277754, 46.564301], [11.5660321, 46.4186793], [11.5041944, 46.2732403], [11.4406416, 46.1284109], [11.3787445, 45.983333], [11.3613307, 45.9395307], [10.2904841, 45.9582645], [10.3140353, 46.9461683], [11.7555849, 46.9205364], [11.7520729, 46.8502664]]]}, \"bbox\": [10.2904841, 45.9395307, 11.7555849, 46.9461683], \"properties\": {\"datetime\": \"2024-07-29T10:20:21.025000Z\", \"platform\": \"Sentinel-2A\", \"proj:epsg\": 32632, \"instruments\": [\"msi\"], \"s2:mgrs_tile\": \"32TPS\", \"constellation\": \"Sentinel 2\", \"s2:granule_id\": \"S2A_OPER_MSI_L2A_TL_2APS_20240729T194952_A047538_T32TPS_N05.11\", \"eo:cloud_cover\": 16.663046, \"s2:datatake_id\": \"GS2A_20240729T102021_047538_N05.11\", \"s2:product_uri\": \"S2A_MSIL2A_20240729T102021_N0511_R065_T32TPS_20240729T194952.SAFE\", \"s2:datastrip_id\": \"S2A_OPER_MSI_L2A_DS_2APS_20240729T194952_S20240729T102559_N05.11\", \"s2:product_type\": \"S2MSI2A\", \"sat:orbit_state\": \"descending\", \"s2:datatake_type\": \"INS-NOBS\", \"s2:generation_time\": \"2024-07-29T19:49:52.000000Z\", \"sat:relative_orbit\": 65, \"s2:water_percentage\": 0.341176, \"s2:mean_solar_zenith\": 30.0395059052058, \"s2:mean_solar_azimuth\": 153.55374565552, \"s2:processing_baseline\": \"05.11\", \"s2:snow_ice_percentage\": 1.480092, \"s2:vegetation_percentage\": 63.926095, \"s2:thin_cirrus_percentage\": 0.036718, \"s2:cloud_shadow_percentage\": 1.713186, \"s2:nodata_pixel_percentage\": 11.29414, \"s2:unclassified_percentage\": 0.794875, \"s2:not_vegetated_percentage\": 12.102448, \"s2:degraded_msi_data_percentage\": 0.0256, \"s2:high_proba_clouds_percentage\": 9.40951, \"s2:reflectance_conversion_factor\": 0.969413241562976, \"s2:medium_proba_clouds_percentage\": 7.216818, \"s2:saturated_defective_pixel_percentage\": 0.0}, \"links\": [{\"rel\": \"collection\", \"href\": \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a\", \"type\": \"application/json\"}, {\"rel\": \"parent\", \"href\": \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a\", \"type\": \"application/json\"}, {\"rel\": \"root\", \"href\": \"https://planetarycomputer.microsoft.com/api/stac/v1/\", \"type\": \"application/json\"}, {\"rel\": \"license\", \"href\": \"https://sentinel.esa.int/documents/247904/690755/Sentinel_Data_Legal_Notice\"}, {\"rel\": \"preview\", \"href\": \"https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=sentinel-2-l2a&item=S2A_MSIL2A_20240729T102021_R065_T32TPS_20240729T194952\", \"type\": \"text/html\", \"title\": \"Map of item\"}, {\"rel\": \"derived_from\", \"href\": \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a/items/S2A_MSIL2A_20240729T102021_R065_T32TPS_20240729T194952\"}], \"assets\": {\"AOT\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_AOT_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Aerosol optical thickness (AOT)\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"roles\": [\"data\"]}, \"B01\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B01_60m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 1 - Coastal aerosol - 60m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [1830, 1830], \"proj:transform\": [60.0, 0.0, 600000.0, 0.0, -60.0, 5200020.0], \"gsd\": 60.0, \"eo:bands\": [{\"name\": \"B01\", \"common_name\": \"coastal\", \"description\": \"Band 1 - Coastal aerosol\", \"center_wavelength\": 0.443, \"full_width_half_max\": 0.027}], \"roles\": [\"data\"]}, \"B02\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B02_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 2 - Blue - 10m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B02\", \"common_name\": \"blue\", \"description\": \"Band 2 - Blue\", \"center_wavelength\": 0.49, \"full_width_half_max\": 0.098}], \"roles\": [\"data\"]}, \"B03\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B03_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 3 - Green - 10m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B03\", \"common_name\": \"green\", \"description\": \"Band 3 - Green\", \"center_wavelength\": 0.56, \"full_width_half_max\": 0.045}], \"roles\": [\"data\"]}, \"B04\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B04_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 4 - Red - 10m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B04\", \"common_name\": \"red\", \"description\": \"Band 4 - Red\", \"center_wavelength\": 0.665, \"full_width_half_max\": 0.038}], \"roles\": [\"data\"]}, \"B05\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B05_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 5 - Vegetation red edge 1 - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B05\", \"common_name\": \"rededge\", \"description\": \"Band 5 - Vegetation red edge 1\", \"center_wavelength\": 0.704, \"full_width_half_max\": 0.019}], \"roles\": [\"data\"]}, \"B06\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B06_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 6 - Vegetation red edge 2 - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B06\", \"common_name\": \"rededge\", \"description\": \"Band 6 - Vegetation red edge 2\", \"center_wavelength\": 0.74, \"full_width_half_max\": 0.018}], \"roles\": [\"data\"]}, \"B07\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B07_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 7 - Vegetation red edge 3 - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B07\", \"common_name\": \"rededge\", \"description\": \"Band 7 - Vegetation red edge 3\", \"center_wavelength\": 0.783, \"full_width_half_max\": 0.028}], \"roles\": [\"data\"]}, \"B08\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B08_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 8 - NIR - 10m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B08\", \"common_name\": \"nir\", \"description\": \"Band 8 - NIR\", \"center_wavelength\": 0.842, \"full_width_half_max\": 0.145}], \"roles\": [\"data\"]}, \"B09\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B09_60m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 9 - Water vapor - 60m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [1830, 1830], \"proj:transform\": [60.0, 0.0, 600000.0, 0.0, -60.0, 5200020.0], \"gsd\": 60.0, \"eo:bands\": [{\"name\": \"B09\", \"description\": \"Band 9 - Water vapor\", \"center_wavelength\": 0.945, \"full_width_half_max\": 0.026}], \"roles\": [\"data\"]}, \"B11\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B11_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 11 - SWIR (1.6) - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B11\", \"common_name\": \"swir16\", \"description\": \"Band 11 - SWIR (1.6)\", \"center_wavelength\": 1.61, \"full_width_half_max\": 0.143}], \"roles\": [\"data\"]}, \"B12\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B12_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 12 - SWIR (2.2) - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B12\", \"common_name\": \"swir22\", \"description\": \"Band 12 - SWIR (2.2)\", \"center_wavelength\": 2.19, \"full_width_half_max\": 0.242}], \"roles\": [\"data\"]}, \"B8A\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_B8A_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Band 8A - Vegetation red edge 4 - 20m\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"eo:bands\": [{\"name\": \"B8A\", \"common_name\": \"rededge\", \"description\": \"Band 8A - Vegetation red edge 4\", \"center_wavelength\": 0.865, \"full_width_half_max\": 0.033}], \"roles\": [\"data\"]}, \"SCL\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_SCL_20m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Scene classfication map (SCL)\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [5490, 5490], \"proj:transform\": [20.0, 0.0, 600000.0, 0.0, -20.0, 5200020.0], \"gsd\": 20.0, \"roles\": [\"data\"]}, \"WVP\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_WVP_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"Water vapour (WVP)\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"roles\": [\"data\"]}, \"visual\": {\"href\": \"s2_data_stac-asset/T32TPS_20240729T102021_TCI_10m.tif\", \"type\": \"image/tiff; application=geotiff; profile=cloud-optimized\", \"title\": \"True color image\", \"proj:bbox\": [600000.0, 5090220.0, 709800.0, 5200020.0], \"proj:shape\": [10980, 10980], \"proj:transform\": [10.0, 0.0, 600000.0, 0.0, -10.0, 5200020.0], \"gsd\": 10.0, \"eo:bands\": [{\"name\": \"B04\", \"common_name\": \"red\", \"description\": \"Band 4 - Red\", \"center_wavelength\": 0.665, \"full_width_half_max\": 0.038}, {\"name\": \"B03\", \"common_name\": \"green\", \"description\": \"Band 3 - Green\", \"center_wavelength\": 0.56, \"full_width_half_max\": 0.045}, {\"name\": \"B02\", \"common_name\": \"blue\", \"description\": \"Band 2 - Blue\", \"center_wavelength\": 0.49, \"full_width_half_max\": 0.098}], \"roles\": [\"data\"]}, \"safe-manifest\": {\"href\": \"s2_data_stac-asset/manifest.safe\", \"type\": \"application/xml\", \"title\": \"SAFE manifest\", \"roles\": [\"metadata\"]}, \"granule-metadata\": {\"href\": \"s2_data_stac-asset/MTD_TL.xml\", \"type\": \"application/xml\", \"title\": \"Granule metadata\", \"roles\": [\"metadata\"]}, \"inspire-metadata\": {\"href\": \"s2_data_stac-asset/INSPIRE.xml\", \"type\": \"application/xml\", \"title\": \"INSPIRE metadata\", \"roles\": [\"metadata\"]}, \"product-metadata\": {\"href\": \"s2_data_stac-asset/MTD_MSIL2A.xml\", \"type\": \"application/xml\", \"title\": \"Product metadata\", \"roles\": [\"metadata\"]}, \"datastrip-metadata\": {\"href\": \"s2_data_stac-asset/MTD_DS.xml\", \"type\": \"application/xml\", \"title\": \"Datastrip metadata\", \"roles\": [\"metadata\"]}, \"tilejson\": {\"href\": \"s2_data_stac-asset/tilejson.json\", \"type\": \"application/json\", \"title\": \"TileJSON with default rendering\", \"roles\": [\"tiles\"]}, \"rendered_preview\": {\"href\": \"s2_data_stac-asset/preview.png\", \"type\": \"image/png\", \"title\": \"Rendered preview\", \"rel\": \"preview\", \"roles\": [\"overview\"]}}, \"collection\": \"sentinel-2-l2a\"}\n\n\n                                                                     \n\n23/23: 100%|██████████| 1.74G/1.74G [00:51<00:00, 36.7MB/s, 0 errors]\n\n\n0"
  },
  {
    "objectID": "code-snippets/data-download/01_download_s2_odc-stac.html",
    "href": "code-snippets/data-download/01_download_s2_odc-stac.html",
    "title": "odc.stack.stac_load",
    "section": "",
    "text": "from pystac_client import Client\nimport planetary_computer\nfrom odc.stac import stac_load\n\nfrom bounding_box import *\n\nSet modifier in client, otherwise the search will succeed, but data access not\n\ncatalog = Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\nquery = catalog.search(\n    collections=[\"sentinel-2-l2a\"],\n    bbox=[lon_min, lat_min, lon_max, lat_max],\n    datetime=\"2024-07-01\",\n)\n\nitems = list(query.items())\nprint(f\"Found: {len(items):d} datasets\")\n\nRemember to set the chunks, otherwise the data will be loaded eagerly!\n\nchunk_size = 1024\n\nds = stac_load(\n    items,\n    bands=(\"B04\", \"B03\", \"B02\", \"B08\"),\n    resolution=10,\n    chunks={\"time\": 1, \"x\": chunk_size, \"y\": chunk_size} # this prevents eager loading of data\n)\nds\n\n\nds = ds.sel(x=slice(x_min, x_max), y=slice(y_max, y_min))\n\n\nds = ds.isel(time=[0]) # just take first timestep to reduce amount of data\n\n\n# load data into memory if desired\nds.load()\n\n\nds[\"B04\"].squeeze().plot.imshow()\n\n… write to disk, if necessary …"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html#check-that-important-info-on-crs-is-present",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html#check-that-important-info-on-crs-is-present",
    "title": "Lazy resampling",
    "section": "Check that important info on crs is present",
    "text": "Check that important info on crs is present\n\nassert ds_webcam.odc.geobox\n\n\nassert ds_webcam.odc.crs\n\n\nConstruct geobox needed for xr_reproject\n\nxmin, xmax = 656320.0, 661020.0\nymax, ymin = 5213480.0, 5209240.0\n\nlower_res = 20 # target resolution in meters\n\nepsg_code = 25832\n\n\nbbox = BoundingBox(left=xmin, top=ymax, bottom=ymin, right=xmax)\ngeobox = GeoBox.from_bbox(bbox=bbox, crs=epsg_code, resolution=lower_res)"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-computation-on-dataset",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-computation-on-dataset",
    "title": "Lazy resampling",
    "section": "Perform computation on dataset",
    "text": "Perform computation on dataset\nI sometimes use xr.DataArray objects in computations. It is easy to oversee that the data array (here ds_webcam.snow_cover) does not inherit or carry over all the important information (.odc.crs and .odc.geobox) present on the parent dataset object (ds_webcam) when used in computations.\n\n# perform the dummy operation\nsnow_cover = replace_2_by_0(ds_webcam.snow_cover)\n\n\n# geobox is present!\nassert snow_cover.odc.geobox\n\n/home/<user>/miniconda3/envs/satpy/lib/python3.13/site-packages/odc/geo/_xr_interop.py:503: UserWarning: grid_mapping=spatial_ref is not pointing to valid coordinate\n  warnings.warn(\n\n\n\n# but the crs is not (as the above warning indicates)\nsnow_cover.odc.crs\n\nTo me this was initially counter intuitive, as the parent dataset has the complete information:\n\nds_webcam.odc.crs\n\nCRS('PROJCS[\"ETRS89 / UTM zone 32N\",GEOGCS[\"ETRS89\",DATUM[\"European_Terrestrial_Reference_System_1989\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"6258\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4258\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",9],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"25832\"]]')\n\n\nLet’s fix that:\n\nsnow_cover = snow_cover.odc.assign_crs(\"epsg:25832\")"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html#check-source-no-data-value-and-set-correctly",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html#check-source-no-data-value-and-set-correctly",
    "title": "Lazy resampling",
    "section": "Check source no data value and set correctly",
    "text": "Check source no data value and set correctly\n\n# show that nodata attribute is missing\nassert getattr(snow_cover, \"nodata\", None) is None\n\n\n# add nodata attribute\nsnow_cover[\"nodata\"] = np.nan"
  },
  {
    "objectID": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-lazy-resampling",
    "href": "code-snippets/xarray/04_resampling_xr_reproject.html#perform-lazy-resampling",
    "title": "Lazy resampling",
    "section": "Perform lazy resampling",
    "text": "Perform lazy resampling\n\nsnow_cover_downsampled = xr_reproject(snow_cover, geobox, resampling=Resampling.mode)\nsnow_cover_downsampled.name = \"snow_cover\"\n\nWhich returns a dask-backed dataarray:\n\nsnow_cover_downsampled\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'snow_cover' (time: 1, y: 212, x: 235)> Size: 399kB\ndask.array<reproject, shape=(1, 212, 235), dtype=float64, chunksize=(1, 212, 235), chunktype=numpy.ndarray>\nCoordinates:\n  * time         (time) datetime64[ns] 8B 2021-07-15\n    nodata       float64 8B nan\n  * y            (y) float64 2kB 5.213e+06 5.213e+06 ... 5.209e+06 5.209e+06\n  * x            (x) float64 2kB 6.563e+05 6.564e+05 ... 6.61e+05 6.61e+05\n    spatial_ref  int32 4B 25832\nAttributes:\n    AREA_OR_POINT:  Areaxarray.DataArray'snow_cover'time: 1y: 212x: 235dask.array<chunksize=(1, 212, 235), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         389.22 kiB \n                         389.22 kiB \n                    \n                    \n                    \n                         Shape \n                         (1, 212, 235) \n                         (1, 212, 235) \n                    \n                    \n                         Dask graph \n                         1 chunks in 5 graph layers \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  235\n  212\n  1\n\n        \n    \nCoordinates: (5)time(time)datetime64[ns]2021-07-15array(['2021-07-15T00:00:00.000000000'], dtype='datetime64[ns]')nodata()float64nanarray(nan)y(y)float645.213e+06 5.213e+06 ... 5.209e+06units :metreresolution :-20.0crs :EPSG:25832array([5213470., 5213450., 5213430., ..., 5209290., 5209270., 5209250.],\n      shape=(212,))x(x)float646.563e+05 6.564e+05 ... 6.61e+05units :metreresolution :20.0crs :EPSG:25832array([656330., 656350., 656370., ..., 660970., 660990., 661010.], shape=(235,))spatial_ref()int3225832spatial_ref :PROJCRS[\"ETRS89 / UTM zone 32N\",BASEGEOGCRS[\"ETRS89\",DATUM[\"European Terrestrial Reference System 1989\",ELLIPSOID[\"GRS 1980\",6378137,298.257222101,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4258]],CONVERSION[\"UTM zone 32N\",METHOD[\"Transverse Mercator\",ID[\"EPSG\",9807]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",9,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"Scale factor at natural origin\",0.9996,SCALEUNIT[\"unity\",1],ID[\"EPSG\",8805]],PARAMETER[\"False easting\",500000,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Engineering survey, topographic mapping.\"],AREA[\"Europe between 6°E and 12°E: Austria; Denmark - onshore and offshore; Germany - onshore and offshore; Italy - onshore and offshore; Norway including Svalbard - onshore and offshore; Spain - offshore.\"],BBOX[36.53,6,84.01,12.01]],USAGE[SCOPE[\"Pan-European conformal mapping at scales larger than 1:500,000.\"],AREA[\"Europe between 6°E and 12°E and approximately 36°30'N to 84°N.\"],BBOX[36.53,6,84.01,12.01]],ID[\"EPSG\",25832]]crs_wkt :PROJCRS[\"ETRS89 / UTM zone 32N\",BASEGEOGCRS[\"ETRS89\",DATUM[\"European Terrestrial Reference System 1989\",ELLIPSOID[\"GRS 1980\",6378137,298.257222101,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4258]],CONVERSION[\"UTM zone 32N\",METHOD[\"Transverse Mercator\",ID[\"EPSG\",9807]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",9,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"Scale factor at natural origin\",0.9996,SCALEUNIT[\"unity\",1],ID[\"EPSG\",8805]],PARAMETER[\"False easting\",500000,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Engineering survey, topographic mapping.\"],AREA[\"Europe between 6°E and 12°E: Austria; Denmark - onshore and offshore; Germany - onshore and offshore; Italy - onshore and offshore; Norway including Svalbard - onshore and offshore; Spain - offshore.\"],BBOX[36.53,6,84.01,12.01]],USAGE[SCOPE[\"Pan-European conformal mapping at scales larger than 1:500,000.\"],AREA[\"Europe between 6°E and 12°E and approximately 36°30'N to 84°N.\"],BBOX[36.53,6,84.01,12.01]],ID[\"EPSG\",25832]]semi_major_axis :6378137.0semi_minor_axis :6356752.314140356inverse_flattening :298.257222101reference_ellipsoid_name :GRS 1980longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :ETRS89horizontal_datum_name :European Terrestrial Reference System 1989projected_crs_name :ETRS89 / UTM zone 32Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :9.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996GeoTransform :656320 20 0 5213480 0 -20array(25832, dtype=int32)Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2021-07-15'], dtype='datetime64[ns]', name='time', freq=None))yPandasIndexPandasIndex(Index([5213470.0, 5213450.0, 5213430.0, 5213410.0, 5213390.0, 5213370.0,\n       5213350.0, 5213330.0, 5213310.0, 5213290.0,\n       ...\n       5209430.0, 5209410.0, 5209390.0, 5209370.0, 5209350.0, 5209330.0,\n       5209310.0, 5209290.0, 5209270.0, 5209250.0],\n      dtype='float64', name='y', length=212))xPandasIndexPandasIndex(Index([656330.0, 656350.0, 656370.0, 656390.0, 656410.0, 656430.0, 656450.0,\n       656470.0, 656490.0, 656510.0,\n       ...\n       660830.0, 660850.0, 660870.0, 660890.0, 660910.0, 660930.0, 660950.0,\n       660970.0, 660990.0, 661010.0],\n      dtype='float64', name='x', length=235))Attributes: (1)AREA_OR_POINT :Area\n\n\n\nsnow_cover_downsampled.plot()\n\n<matplotlib.collections.QuadMesh at 0x73dbcc5e86e0>"
  },
  {
    "objectID": "code-snippets/data-download/02_download_s2_stackstac.html",
    "href": "code-snippets/data-download/02_download_s2_stackstac.html",
    "title": "stackstac.stack",
    "section": "",
    "text": "Data will be written to a temporary directory to illustrate that how to remove attributes, which is necessary if you want to write the object as a zarr file to disk.\n\nfrom pathlib import Path\nimport sys\nimport tempfile\n\nimport numpy as np\nimport pystac_client\nimport stackstac\n\nfrom bounding_box import *\n\n\nprint(sys.version)\nprint(pystac_client.__version__)\nprint(stackstac.__version__)\n\n3.13.1 | packaged by conda-forge | (main, Dec  5 2024, 21:23:54) [GCC 13.3.0]\n0.8.6\n0.5.1\n\n\n\ntmp_dir = tempfile.TemporaryDirectory()\nout_dir = Path(tmp_dir.name)\n\n\ncatalog = pystac_client.Client.open(\"https://earth-search.aws.element84.com/v1/\")\n\nquery = catalog.search(\n    collections=[\"sentinel-2-l2a\"],\n    bbox=[lon_min, lat_min, lon_max, lat_max],\n    datetime=\"2024-07-01\",\n)\n\nitems = list(query.items())\nprint(f\"Found: {len(items):d} datasets\")\n\nFound: 2 datasets\n\n\n\nds = stackstac.stack(\n    items,\n    assets=[\"red\", \"green\", \"blue\", \"nir08\"],\n    resolution=10,\n    xy_coords=\"center\",\n    epsg=32632\n)\n\n\nds = ds.sel(x=slice(x_min, x_max), y=slice(y_max, y_min))\n\n\nds = ds.isel(time=[0]) # just take first timestep to reduce amount of data\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'stackstac-7f303e927bf4afe6baade82cf0bd2b4e' (time: 1,\n                                                                band: 4,\n                                                                y: 6675, x: 5329)> Size: 1GB\ndask.array<getitem, shape=(1, 4, 6675, 5329), dtype=float64, chunksize=(1, 1, 1024, 1024), chunktype=numpy.ndarray>\nCoordinates: (12/52)\n  * time                                     (time) datetime64[ns] 8B 2024-07...\n    id                                       (time) <U24 96B 'S2B_32TPT_20240...\n  * band                                     (band) <U5 80B 'red' ... 'nir08'\n  * x                                        (x) float64 43kB 6.217e+05 ... 6...\n  * y                                        (y) float64 53kB 5.237e+06 ... 5...\n    instruments                              <U3 12B 'msi'\n    ...                                       ...\n    raster:bands                             (band) object 32B {'nodata': 0, ...\n    title                                    (band) <U21 336B 'Red (band 4) -...\n    common_name                              (band) <U5 80B 'red' ... 'nir08'\n    center_wavelength                        (band) float64 32B 0.665 ... 0.865\n    full_width_half_max                      (band) float64 32B 0.038 ... 0.033\n    epsg                                     int64 8B 32632\nAttributes:\n    spec:        RasterSpec(epsg=32632, bounds=(598150, 5087460, 713750, 5302...\n    crs:         epsg:32632\n    transform:   | 10.00, 0.00, 598150.00|\\n| 0.00,-10.00, 5302570.00|\\n| 0.0...\n    resolution:  10xarray.DataArray'stackstac-7f303e927bf4afe6baade82cf0bd2b4e'time: 1band: 4y: 6675x: 5329dask.array<chunksize=(1, 1, 639, 716), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         1.06 GiB \n                         8.00 MiB \n                    \n                    \n                    \n                         Shape \n                         (1, 4, 6675, 5329) \n                         (1, 1, 1024, 1024) \n                    \n                    \n                         Dask graph \n                         168 chunks in 5 graph layers \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  1\n  1\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  5329\n  6675\n  4\n\n        \n    \nCoordinates: (52)time(time)datetime64[ns]2024-07-01T10:17:48.675000array(['2024-07-01T10:17:48.675000000'], dtype='datetime64[ns]')id(time)<U24'S2B_32TPT_20240701_0_L2A'array(['S2B_32TPT_20240701_0_L2A'], dtype='<U24')band(band)<U5'red' 'green' 'blue' 'nir08'array(['red', 'green', 'blue', 'nir08'], dtype='<U5')x(x)float646.217e+05 6.217e+05 ... 6.75e+05array([621715., 621725., 621735., ..., 674975., 674985., 674995.],\n      shape=(5329,))y(y)float645.237e+06 5.237e+06 ... 5.171e+06array([5237275., 5237265., 5237255., ..., 5170555., 5170545., 5170535.],\n      shape=(6675,))instruments()<U3'msi'array('msi', dtype='<U3')s2:datatake_type()<U8'INS-NOBS'array('INS-NOBS', dtype='<U8')mgrs:latitude_band()<U1'T'array('T', dtype='<U1')view:sun_azimuth(time)float64147.6array([147.56725077])s2:unclassified_percentage(time)float640.005876array([0.005876])updated(time)<U24'2024-07-01T15:45:23.617Z'array(['2024-07-01T15:45:23.617Z'], dtype='<U24')s2:medium_proba_clouds_percentage(time)float6426.11array([26.107556])earthsearch:s3_path(time)<U79's3://sentinel-cogs/sentinel-s2-...array(['s3://sentinel-cogs/sentinel-s2-l2a-cogs/32/T/PT/2024/7/S2B_32TPT_20240701_0_L2A'],\n      dtype='<U79')s2:product_type()<U7'S2MSI2A'array('S2MSI2A', dtype='<U7')s2:datastrip_id()<U64'S2B_OPER_MSI_L2A_DS_2BPS_202407...array('S2B_OPER_MSI_L2A_DS_2BPS_20240701T125445_S20240701T101053_N05.10',\n      dtype='<U64')s2:degraded_msi_data_percentage(time)float640.0978array([0.0978])s2:processing_baseline()<U5'05.10'array('05.10', dtype='<U5')processing:software()object{'sentinel2-to-stac': '0.1.1'}array({'sentinel2-to-stac': '0.1.1'}, dtype=object)grid:code(time)<U10'MGRS-32TPT'array(['MGRS-32TPT'], dtype='<U10')mgrs:utm_zone()int6432array(32)s2:dark_features_percentage(time)float640.000479array([0.000479])s2:generation_time()<U27'2024-07-01T12:54:45.000000Z'array('2024-07-01T12:54:45.000000Z', dtype='<U27')s2:thin_cirrus_percentage(time)float642.272array([2.2715])proj:code()<U10'EPSG:32632'array('EPSG:32632', dtype='<U10')s2:high_proba_clouds_percentage(time)float6469.49array([69.491315])created(time)<U24'2024-07-01T15:45:23.617Z'array(['2024-07-01T15:45:23.617Z'], dtype='<U24')constellation()<U10'sentinel-2'array('sentinel-2', dtype='<U10')s2:datatake_id()<U34'GS2B_20240701T100559_038229_N05...array('GS2B_20240701T100559_038229_N05.10', dtype='<U34')s2:snow_ice_percentage(time)float640.01595array([0.015945])mgrs:grid_square(time)<U2'PT'array(['PT'], dtype='<U2')platform()<U11'sentinel-2b'array('sentinel-2b', dtype='<U11')s2:granule_id(time)<U62'S2B_OPER_MSI_L2A_TL_2BPS_202407...array(['S2B_OPER_MSI_L2A_TL_2BPS_20240701T125445_A038229_T32TPT_N05.10'],\n      dtype='<U62')earthsearch:payload_id(time)<U74'roda-sentinel2/workflow-sentine...array(['roda-sentinel2/workflow-sentinel2-to-stac/cd2c9a0c8c33cff594b43f495a19f35e'],\n      dtype='<U74')s2:sequence()<U1'0'array('0', dtype='<U1')s2:nodata_pixel_percentage(time)object8.589324array([8.589324], dtype=object)s2:vegetation_percentage(time)float640.08036array([0.080359])s2:saturated_defective_pixel_percentage()int640array(0)s2:product_uri(time)<U65'S2B_MSIL2A_20240701T100559_N051...array(['S2B_MSIL2A_20240701T100559_N0510_R022_T32TPT_20240701T125445.SAFE'],\n      dtype='<U65')eo:cloud_cover(time)float6497.87array([97.870368])s2:cloud_shadow_percentage(time)float642.004array([2.003527])s2:not_vegetated_percentage(time)float640.01881array([0.018809])earthsearch:boa_offset_applied()boolTruearray(True)view:sun_elevation(time)float6462.73array([62.72922262])s2:water_percentage(time)float640.004639array([0.004639])s2:reflectance_conversion_factor()float640.9676array(0.9675944)gsd(band)int6410 10 10 20array([10, 10, 10, 20])raster:bands(band)object{'nodata': 0, 'data_type': 'uint...array([{'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 10, 'scale': 0.0001, 'offset': -0.1},\n       {'nodata': 0, 'data_type': 'uint16', 'bits_per_sample': 15, 'spatial_resolution': 20, 'scale': 0.0001, 'offset': -0.1}],\n      dtype=object)title(band)<U21'Red (band 4) - 10m' ... 'NIR 2 ...array(['Red (band 4) - 10m', 'Green (band 3) - 10m',\n       'Blue (band 2) - 10m', 'NIR 2 (band 8A) - 20m'], dtype='<U21')common_name(band)<U5'red' 'green' 'blue' 'nir08'array(['red', 'green', 'blue', 'nir08'], dtype='<U5')center_wavelength(band)float640.665 0.56 0.49 0.865array([0.665, 0.56 , 0.49 , 0.865])full_width_half_max(band)float640.038 0.045 0.098 0.033array([0.038, 0.045, 0.098, 0.033])epsg()int6432632array(32632)Indexes: (4)timePandasIndexPandasIndex(DatetimeIndex(['2024-07-01 10:17:48.675000'], dtype='datetime64[ns]', name='time', freq=None))bandPandasIndexPandasIndex(Index(['red', 'green', 'blue', 'nir08'], dtype='object', name='band'))xPandasIndexPandasIndex(Index([621715.0, 621725.0, 621735.0, 621745.0, 621755.0, 621765.0, 621775.0,\n       621785.0, 621795.0, 621805.0,\n       ...\n       674905.0, 674915.0, 674925.0, 674935.0, 674945.0, 674955.0, 674965.0,\n       674975.0, 674985.0, 674995.0],\n      dtype='float64', name='x', length=5329))yPandasIndexPandasIndex(Index([5237275.0, 5237265.0, 5237255.0, 5237245.0, 5237235.0, 5237225.0,\n       5237215.0, 5237205.0, 5237195.0, 5237185.0,\n       ...\n       5170625.0, 5170615.0, 5170605.0, 5170595.0, 5170585.0, 5170575.0,\n       5170565.0, 5170555.0, 5170545.0, 5170535.0],\n      dtype='float64', name='y', length=6675))Attributes: (4)spec :RasterSpec(epsg=32632, bounds=(598150, 5087460, 713750, 5302570), resolutions_xy=(10, 10))crs :epsg:32632transform :| 10.00, 0.00, 598150.00|\n| 0.00,-10.00, 5302570.00|\n| 0.00, 0.00, 1.00|resolution :10"
  },
  {
    "objectID": "code-snippets/data-download/02_download_s2_stackstac.html#remove-or-convert-coordinates-and-attributes-with-dtype-object",
    "href": "code-snippets/data-download/02_download_s2_stackstac.html#remove-or-convert-coordinates-and-attributes-with-dtype-object",
    "title": "stackstac.stack",
    "section": "Remove or convert coordinates and attributes with dtype object",
    "text": "Remove or convert coordinates and attributes with dtype object\nThese can’t be serialized by zarr\n\nds[\"s2:nodata_pixel_percentage\"] = ds[\"s2:nodata_pixel_percentage\"].astype(np.float32)\n\n\nfor coord in ds.coords:\n    if type(ds[coord].dtype) == np.dtypes.ObjectDType:\n        print(coord)\n\nprocessing:software\nraster:bands\n\n\n\nds = ds.drop_vars([\"raster:bands\", \"processing:software\"])"
  },
  {
    "objectID": "code-snippets/data-download/02_download_s2_stackstac.html#unify-chunks",
    "href": "code-snippets/data-download/02_download_s2_stackstac.html#unify-chunks",
    "title": "stackstac.stack",
    "section": "Unify chunks",
    "text": "Unify chunks\n\nds = ds.chunk(chunks={\"time\": 1, \"x\": 1000, \"y\": 1000})"
  },
  {
    "objectID": "code-snippets/data-download/02_download_s2_stackstac.html#remove-attributes---be-careful-geotransform-probably-lost",
    "href": "code-snippets/data-download/02_download_s2_stackstac.html#remove-attributes---be-careful-geotransform-probably-lost",
    "title": "stackstac.stack",
    "section": "Remove attributes - be careful, geotransform probably lost",
    "text": "Remove attributes - be careful, geotransform probably lost\n\nds.attrs\n\n{'spec': RasterSpec(epsg=32632, bounds=(598150, 5087460, 713750, 5302570), resolutions_xy=(10, 10)),\n 'crs': 'epsg:32632',\n 'transform': Affine(10.0, 0.0, 598150.0,\n        0.0, -10.0, 5302570.0),\n 'resolution': 10}\n\n\n\nds.attrs = {}\n\n\nds.to_zarr(out_dir / f\"s2_{ds.time.dt.strftime('%Y-%m-%d').values[0]}.zarr\")"
  },
  {
    "objectID": "code-snippets/data-download/02_download_s2_stackstac.html#clean-up",
    "href": "code-snippets/data-download/02_download_s2_stackstac.html#clean-up",
    "title": "stackstac.stack",
    "section": "Clean up",
    "text": "Clean up\n\ntmp_dir.cleanup()"
  },
  {
    "objectID": "code-snippets/xarray/03_resampling_xr_reproject.html",
    "href": "code-snippets/xarray/03_resampling_xr_reproject.html",
    "title": "Lazy resampling",
    "section": "",
    "text": "import sys\nimport numpy as np\nimport xarray as xr\nfrom rasterio.enums import Resampling\nimport odc.geo\nfrom odc.geo.xr import xr_reproject\nfrom odc.geo.geobox import GeoBox, BoundingBox\n\n\nprint(sys.version)\nprint(xr.__version__)\nprint(odc.geo.__version__)\n\n3.13.1 | packaged by conda-forge | (main, Dec  5 2024, 21:23:54) [GCC 13.3.0]\n2025.3.1\n0.4.10\n\n\nThe following function is only to simluate that the crs, while initially present on the opened dataset, can get lost easily along the way in workflows, leading to the reprojection to fail. This is not a shortcoming of xarray or xr_reproject, but I want to document it, as this happened to me several times before.\n\ndef replace_2_by_0(da: xr.DataArray) -> xr.DataArray:\n    \"\"\"Replace 2s by 0\"\"\"\n    return da.where(da != 2, 0)\n\n\nds_webcam = xr.open_zarr(\"./data/webcam_snow_cover.zarr\")\n\n\nds_webcam[\"nodata\"] = np.nan"
  },
  {
    "objectID": "code-snippets/xarray/03_resampling_xr_reproject.html#check-that-important-info-on-crs-is-present",
    "href": "code-snippets/xarray/03_resampling_xr_reproject.html#check-that-important-info-on-crs-is-present",
    "title": "Lazy resampling",
    "section": "Check that important info on crs is present",
    "text": "Check that important info on crs is present\n\nassert ds_webcam.odc.geobox\n\n\nassert ds_webcam.odc.crs\n\n\nConstruct geobox needed for xr_reproject\n\nxmin, xmax = 656320.0, 661020.0\nymax, ymin = 5213480.0, 5209240.0\n\nlower_res = 20 # target resolution in meters\n\nepsg_code = 25832\n\n\nbbox = BoundingBox(left=xmin, top=ymax, bottom=ymin, right=xmax)\ngeobox = GeoBox.from_bbox(bbox=bbox, crs=epsg_code, resolution=lower_res)"
  },
  {
    "objectID": "code-snippets/xarray/03_resampling_xr_reproject.html#perform-computation-on-dataset",
    "href": "code-snippets/xarray/03_resampling_xr_reproject.html#perform-computation-on-dataset",
    "title": "Lazy resampling",
    "section": "Perform computation on dataset",
    "text": "Perform computation on dataset\nI sometimes use xr.DataArray objects in computations. It is easy to oversee that the data array (here ds_webcam.snow_cover) does not inherit or carry over all the important information (.odc.crs and .odc.geobox) present on the parent dataset object (ds_webcam) when used in computations.\n\n# perform the dummy operation\nsnow_cover = replace_2_by_0(ds_webcam.snow_cover)\n\n\n# geobox is present!\nassert snow_cover.odc.geobox\n\n/home/<user>/miniconda3/envs/satpy/lib/python3.13/site-packages/odc/geo/_xr_interop.py:503: UserWarning: grid_mapping=spatial_ref is not pointing to valid coordinate\n  warnings.warn(\n\n\n\n# but the crs is not (as the above warning indicates)\nsnow_cover.odc.crs\n\nTo me this was initially counter intuitive, as the parent dataset has the complete information:\n\nds_webcam.odc.crs\n\nCRS('PROJCS[\"ETRS89 / UTM zone 32N\",GEOGCS[\"ETRS89\",DATUM[\"European_Terrestrial_Reference_System_1989\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"6258\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4258\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",9],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"25832\"]]')\n\n\nLet’s fix that:\n\nsnow_cover = snow_cover.odc.assign_crs(\"epsg:25832\")"
  },
  {
    "objectID": "code-snippets/xarray/03_resampling_xr_reproject.html#check-source-no-data-value-and-set-correctly",
    "href": "code-snippets/xarray/03_resampling_xr_reproject.html#check-source-no-data-value-and-set-correctly",
    "title": "Lazy resampling",
    "section": "Check source no data value and set correctly",
    "text": "Check source no data value and set correctly\n\n# show that nodata attribute is missing\nassert getattr(snow_cover, \"nodata\", None) is None\n\n\n# add nodata attribute\nsnow_cover[\"nodata\"] = np.nan"
  },
  {
    "objectID": "code-snippets/xarray/03_resampling_xr_reproject.html#perform-lazy-resampling",
    "href": "code-snippets/xarray/03_resampling_xr_reproject.html#perform-lazy-resampling",
    "title": "Lazy resampling",
    "section": "Perform lazy resampling",
    "text": "Perform lazy resampling\n\nsnow_cover_downsampled = xr_reproject(snow_cover, geobox, resampling=Resampling.mode)\nsnow_cover_downsampled.name = \"snow_cover\"\n\nWhich returns a dask-backed dataarray:\n\nsnow_cover_downsampled\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.DataArray 'snow_cover' (time: 1, y: 212, x: 235)> Size: 399kB\ndask.array<reproject, shape=(1, 212, 235), dtype=float64, chunksize=(1, 212, 235), chunktype=numpy.ndarray>\nCoordinates:\n  * time         (time) datetime64[ns] 8B 2021-07-15\n    nodata       float64 8B nan\n  * y            (y) float64 2kB 5.213e+06 5.213e+06 ... 5.209e+06 5.209e+06\n  * x            (x) float64 2kB 6.563e+05 6.564e+05 ... 6.61e+05 6.61e+05\n    spatial_ref  int32 4B 25832\nAttributes:\n    AREA_OR_POINT:  Areaxarray.DataArray'snow_cover'time: 1y: 212x: 235dask.array<chunksize=(1, 212, 235), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         389.22 kiB \n                         389.22 kiB \n                    \n                    \n                    \n                         Shape \n                         (1, 212, 235) \n                         (1, 212, 235) \n                    \n                    \n                         Dask graph \n                         1 chunks in 5 graph layers \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  235\n  212\n  1\n\n        \n    \nCoordinates: (5)time(time)datetime64[ns]2021-07-15array(['2021-07-15T00:00:00.000000000'], dtype='datetime64[ns]')nodata()float64nanarray(nan)y(y)float645.213e+06 5.213e+06 ... 5.209e+06units :metreresolution :-20.0crs :EPSG:25832array([5213470., 5213450., 5213430., ..., 5209290., 5209270., 5209250.],\n      shape=(212,))x(x)float646.563e+05 6.564e+05 ... 6.61e+05units :metreresolution :20.0crs :EPSG:25832array([656330., 656350., 656370., ..., 660970., 660990., 661010.], shape=(235,))spatial_ref()int3225832spatial_ref :PROJCRS[\"ETRS89 / UTM zone 32N\",BASEGEOGCRS[\"ETRS89\",DATUM[\"European Terrestrial Reference System 1989\",ELLIPSOID[\"GRS 1980\",6378137,298.257222101,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4258]],CONVERSION[\"UTM zone 32N\",METHOD[\"Transverse Mercator\",ID[\"EPSG\",9807]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",9,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"Scale factor at natural origin\",0.9996,SCALEUNIT[\"unity\",1],ID[\"EPSG\",8805]],PARAMETER[\"False easting\",500000,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Engineering survey, topographic mapping.\"],AREA[\"Europe between 6°E and 12°E: Austria; Denmark - onshore and offshore; Germany - onshore and offshore; Italy - onshore and offshore; Norway including Svalbard - onshore and offshore; Spain - offshore.\"],BBOX[36.53,6,84.01,12.01]],USAGE[SCOPE[\"Pan-European conformal mapping at scales larger than 1:500,000.\"],AREA[\"Europe between 6°E and 12°E and approximately 36°30'N to 84°N.\"],BBOX[36.53,6,84.01,12.01]],ID[\"EPSG\",25832]]crs_wkt :PROJCRS[\"ETRS89 / UTM zone 32N\",BASEGEOGCRS[\"ETRS89\",DATUM[\"European Terrestrial Reference System 1989\",ELLIPSOID[\"GRS 1980\",6378137,298.257222101,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4258]],CONVERSION[\"UTM zone 32N\",METHOD[\"Transverse Mercator\",ID[\"EPSG\",9807]],PARAMETER[\"Latitude of natural origin\",0,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8801]],PARAMETER[\"Longitude of natural origin\",9,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8802]],PARAMETER[\"Scale factor at natural origin\",0.9996,SCALEUNIT[\"unity\",1],ID[\"EPSG\",8805]],PARAMETER[\"False easting\",500000,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8806]],PARAMETER[\"False northing\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8807]]],CS[Cartesian,2],AXIS[\"(E)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"(N)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Engineering survey, topographic mapping.\"],AREA[\"Europe between 6°E and 12°E: Austria; Denmark - onshore and offshore; Germany - onshore and offshore; Italy - onshore and offshore; Norway including Svalbard - onshore and offshore; Spain - offshore.\"],BBOX[36.53,6,84.01,12.01]],USAGE[SCOPE[\"Pan-European conformal mapping at scales larger than 1:500,000.\"],AREA[\"Europe between 6°E and 12°E and approximately 36°30'N to 84°N.\"],BBOX[36.53,6,84.01,12.01]],ID[\"EPSG\",25832]]semi_major_axis :6378137.0semi_minor_axis :6356752.314140356inverse_flattening :298.257222101reference_ellipsoid_name :GRS 1980longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :ETRS89horizontal_datum_name :European Terrestrial Reference System 1989projected_crs_name :ETRS89 / UTM zone 32Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :9.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996GeoTransform :656320 20 0 5213480 0 -20array(25832, dtype=int32)Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2021-07-15'], dtype='datetime64[ns]', name='time', freq=None))yPandasIndexPandasIndex(Index([5213470.0, 5213450.0, 5213430.0, 5213410.0, 5213390.0, 5213370.0,\n       5213350.0, 5213330.0, 5213310.0, 5213290.0,\n       ...\n       5209430.0, 5209410.0, 5209390.0, 5209370.0, 5209350.0, 5209330.0,\n       5209310.0, 5209290.0, 5209270.0, 5209250.0],\n      dtype='float64', name='y', length=212))xPandasIndexPandasIndex(Index([656330.0, 656350.0, 656370.0, 656390.0, 656410.0, 656430.0, 656450.0,\n       656470.0, 656490.0, 656510.0,\n       ...\n       660830.0, 660850.0, 660870.0, 660890.0, 660910.0, 660930.0, 660950.0,\n       660970.0, 660990.0, 661010.0],\n      dtype='float64', name='x', length=235))Attributes: (1)AREA_OR_POINT :Area\n\n\n\nsnow_cover_downsampled.plot()\n\n<matplotlib.collections.QuadMesh at 0x73dbcc5e86e0>"
  },
  {
    "objectID": "code-snippets/xarray/00_rf_predict_map_blocks.html#generate-a-dummy-model",
    "href": "code-snippets/xarray/00_rf_predict_map_blocks.html#generate-a-dummy-model",
    "title": "ds.map_blocks(…)",
    "section": "Generate a dummy model",
    "text": "Generate a dummy model\n\nrf = RF(random_state=42, n_estimators=50, n_jobs=-1)\nrf.fit(X_train, y_train)"
  },
  {
    "objectID": "code-snippets/xarray/00_rf_predict_map_blocks.html#generate-new-data-to-predict-on",
    "href": "code-snippets/xarray/00_rf_predict_map_blocks.html#generate-new-data-to-predict-on",
    "title": "ds.map_blocks(…)",
    "section": "Generate new data to predict on",
    "text": "Generate new data to predict on\nThe time dimension in the following example is only a placeholder for any kind of predictor dimension. For the example to make sense (and work!), the predictor/feature (i.e., time) dimension must not be chunked internally, i.e., form a single chunk!\n\nn_classes = 2\nn_features = 12\nn_samples = 1000\n\nlat = 4000\nlon = 6000 \ntime = n_features\n\n\n# random training data\nX_train, y_train = generate_X_y(n_samples,n_features, n_classes)\n\n\n# random features to predict on, in a \"real\" shape (x, y, time)\nds = generate_3d_dataset(lat, lon, time)\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 2GB\nDimensions:  (lat: 4000, lon: 6000, time: 12)\nCoordinates:\n  * lat      (lat) int64 32kB 0 1 2 3 4 5 6 ... 3994 3995 3996 3997 3998 3999\n  * lon      (lon) int64 48kB 0 1 2 3 4 5 6 ... 5994 5995 5996 5997 5998 5999\n  * time     (time) datetime64[ns] 96B 2021-01-01 2021-01-02 ... 2021-01-12\nData variables:\n    test     (lat, lon, time) float64 2GB dask.array<chunksize=(400, 600, 12), meta=np.ndarray>xarray.DatasetDimensions:lat: 4000lon: 6000time: 12Coordinates: (3)lat(lat)int640 1 2 3 4 ... 3996 3997 3998 3999array([   0,    1,    2, ..., 3997, 3998, 3999], shape=(4000,))lon(lon)int640 1 2 3 4 ... 5996 5997 5998 5999array([   0,    1,    2, ..., 5997, 5998, 5999], shape=(6000,))time(time)datetime64[ns]2021-01-01 ... 2021-01-12array(['2021-01-01T00:00:00.000000000', '2021-01-02T00:00:00.000000000',\n       '2021-01-03T00:00:00.000000000', '2021-01-04T00:00:00.000000000',\n       '2021-01-05T00:00:00.000000000', '2021-01-06T00:00:00.000000000',\n       '2021-01-07T00:00:00.000000000', '2021-01-08T00:00:00.000000000',\n       '2021-01-09T00:00:00.000000000', '2021-01-10T00:00:00.000000000',\n       '2021-01-11T00:00:00.000000000', '2021-01-12T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (1)test(lat, lon, time)float64dask.array<chunksize=(400, 600, 12), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.15 GiB \n                         21.97 MiB \n                    \n                    \n                    \n                         Shape \n                         (4000, 6000, 12) \n                         (400, 600, 12) \n                    \n                    \n                         Dask graph \n                         100 chunks in 1 graph layer \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  12\n  6000\n  4000\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n       ...\n       3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999],\n      dtype='int64', name='lat', length=4000))lonPandasIndexPandasIndex(Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n       ...\n       5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999],\n      dtype='int64', name='lon', length=6000))timePandasIndexPandasIndex(DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04',\n               '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08',\n               '2021-01-09', '2021-01-10', '2021-01-11', '2021-01-12'],\n              dtype='datetime64[ns]', name='time', freq='D'))Attributes: (0)"
  },
  {
    "objectID": "code-snippets/xarray/01_rf_predict_apply_ufunc.html#generate-some-random-data-for-training-and-inference",
    "href": "code-snippets/xarray/01_rf_predict_apply_ufunc.html#generate-some-random-data-for-training-and-inference",
    "title": "xr.apply_ufunc(…)",
    "section": "Generate some random data for training and inference",
    "text": "Generate some random data for training and inference\n\nn_classes = 2\nn_features = 12\nn_samples = 1000\n\nlat = 40\nlon = 60\ntime = n_features\n\n\n# random training data\nX_train, y_train = generate_X_y(n_samples,n_features, n_classes)\n\n\n# random \"real\" data to predict on\nds = generate_3d_dataset(lat, lon, time)\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 231kB\nDimensions:  (lat: 40, lon: 60, time: 12)\nCoordinates:\n  * lat      (lat) int64 320B 0 1 2 3 4 5 6 7 8 9 ... 31 32 33 34 35 36 37 38 39\n  * lon      (lon) int64 480B 0 1 2 3 4 5 6 7 8 9 ... 51 52 53 54 55 56 57 58 59\n  * time     (time) datetime64[ns] 96B 2021-01-01 2021-01-02 ... 2021-01-12\nData variables:\n    test     (lat, lon, time) float64 230kB dask.array<chunksize=(4, 6, 12), meta=np.ndarray>xarray.DatasetDimensions:lat: 40lon: 60time: 12Coordinates: (3)lat(lat)int640 1 2 3 4 5 6 ... 34 35 36 37 38 39array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39])lon(lon)int640 1 2 3 4 5 6 ... 54 55 56 57 58 59array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59])time(time)datetime64[ns]2021-01-01 ... 2021-01-12array(['2021-01-01T00:00:00.000000000', '2021-01-02T00:00:00.000000000',\n       '2021-01-03T00:00:00.000000000', '2021-01-04T00:00:00.000000000',\n       '2021-01-05T00:00:00.000000000', '2021-01-06T00:00:00.000000000',\n       '2021-01-07T00:00:00.000000000', '2021-01-08T00:00:00.000000000',\n       '2021-01-09T00:00:00.000000000', '2021-01-10T00:00:00.000000000',\n       '2021-01-11T00:00:00.000000000', '2021-01-12T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (1)test(lat, lon, time)float64dask.array<chunksize=(4, 6, 12), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         225.00 kiB \n                         2.25 kiB \n                    \n                    \n                    \n                         Shape \n                         (40, 60, 12) \n                         (4, 6, 12) \n                    \n                    \n                         Dask graph \n                         100 chunks in 1 graph layer \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  12\n  60\n  40\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39],\n      dtype='int64', name='lat'))lonPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59],\n      dtype='int64', name='lon'))timePandasIndexPandasIndex(DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04',\n               '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08',\n               '2021-01-09', '2021-01-10', '2021-01-11', '2021-01-12'],\n              dtype='datetime64[ns]', name='time', freq='D'))Attributes: (0)"
  },
  {
    "objectID": "code-snippets/xarray/00_rf_predict_map_blocks.html#function-for-chunk-wise-application",
    "href": "code-snippets/xarray/00_rf_predict_map_blocks.html#function-for-chunk-wise-application",
    "title": "ds.map_blocks(…)",
    "section": "Function for chunk-wise application",
    "text": "Function for chunk-wise application\n\ndef generic_func(ds: xr.Dataset):\n    \"\"\"\n    Flatten chunk\n    Apply Random Forest model\n    Recover original 2D shape\n    \"\"\"\n    ds_stacked = ds.stack(ml=(\"lat\", \"lon\")).transpose(\"ml\", \"time\")\n\n    # predict on input data\n    X = ds_stacked.test.data\n    y_hat_1d = rf.predict(X)\n    y_hat_2d = y_hat_1d.reshape((ds.lat.size, ds.lon.size))\n\n    # copy the chunk but remove (squeeze) the time dimension\n    data_out = ds.isel(time=[0]).squeeze().copy(deep=True)\n    data_out.test.data = y_hat_2d\n\n    return data_out\n\n\nds_pred = ds.map_blocks(generic_func, template=ds.isel(time=[0]).squeeze())\n\n\nds_pred\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 192MB\nDimensions:  (lat: 4000, lon: 6000)\nCoordinates:\n  * lat      (lat) int64 32kB 0 1 2 3 4 5 6 ... 3994 3995 3996 3997 3998 3999\n  * lon      (lon) int64 48kB 0 1 2 3 4 5 6 ... 5994 5995 5996 5997 5998 5999\n    time     datetime64[ns] 8B dask.array<chunksize=(), meta=np.ndarray>\nData variables:\n    test     (lat, lon) float64 192MB dask.array<chunksize=(400, 600), meta=np.ndarray>xarray.DatasetDimensions:lat: 4000lon: 6000Coordinates: (3)lat(lat)int640 1 2 3 4 ... 3996 3997 3998 3999array([   0,    1,    2, ..., 3997, 3998, 3999], shape=(4000,))lon(lon)int640 1 2 3 4 ... 5996 5997 5998 5999array([   0,    1,    2, ..., 5997, 5998, 5999], shape=(6000,))time()datetime64[ns]dask.array<chunksize=(), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         8 B \n                         8 B \n                    \n                    \n                    \n                         Shape \n                         () \n                         () \n                    \n                    \n                         Dask graph \n                         1 chunks in 4 graph layers \n                    \n                    \n                         Data type \n                         datetime64[ns] numpy.ndarray \n                    \n                \n            \n        \n        \n        \n        \n    \nData variables: (1)test(lat, lon)float64dask.array<chunksize=(400, 600), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         183.11 MiB \n                         1.83 MiB \n                    \n                    \n                    \n                         Shape \n                         (4000, 6000) \n                         (400, 600) \n                    \n                    \n                         Dask graph \n                         100 chunks in 4 graph layers \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  6000\n  4000\n\n        \n    \nIndexes: (2)latPandasIndexPandasIndex(Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n       ...\n       3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999],\n      dtype='int64', name='lat', length=4000))lonPandasIndexPandasIndex(Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n       ...\n       5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999],\n      dtype='int64', name='lon', length=6000))Attributes: (0)\n\n\n\nds_pred = ds_pred.compute()"
  },
  {
    "objectID": "code-snippets/xarray/00_rf_predict_map_blocks.html#train-a-dummy-model",
    "href": "code-snippets/xarray/00_rf_predict_map_blocks.html#train-a-dummy-model",
    "title": "ds.map_blocks(…)",
    "section": "Train a dummy model",
    "text": "Train a dummy model\n\nrf = RF(random_state=42, n_estimators=50, n_jobs=-1)\nrf.fit(X_train, y_train)\n\nRandomForestClassifier(n_estimators=50, n_jobs=-1, random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_estimators=50, n_jobs=-1, random_state=42)"
  },
  {
    "objectID": "code-snippets/xarray/01_rf_predict_apply_ufunc.html#train-a-dummy-model",
    "href": "code-snippets/xarray/01_rf_predict_apply_ufunc.html#train-a-dummy-model",
    "title": "xr.apply_ufunc(…)",
    "section": "Train a dummy model",
    "text": "Train a dummy model\n\nrf = RF(random_state=42, n_estimators=50, n_jobs=-1)\nrf.fit(X_train, y_train)\n\nRandomForestClassifier(n_estimators=50, n_jobs=-1, random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(n_estimators=50, n_jobs=-1, random_state=42)"
  },
  {
    "objectID": "code-snippets/xarray/01_rf_predict_apply_ufunc.html#define-function-to-be-applied-via-.apply.ufunc...",
    "href": "code-snippets/xarray/01_rf_predict_apply_ufunc.html#define-function-to-be-applied-via-.apply.ufunc...",
    "title": "xr.apply_ufunc(…)",
    "section": "Define function to be applied via .apply.ufunc(...)",
    "text": "Define function to be applied via .apply.ufunc(...)\n\ndef generic_func(arr):\n    return rf.predict(arr.reshape(1, -1))\n\n\nds_ag = xr.apply_ufunc(\n    generic_func,\n    ds,\n    input_core_dims=[[\"time\"]],\n    dask=\"parallelized\",\n    output_dtypes=np.float32,\n    vectorize=True,\n    dask_gufunc_kwargs={\"allow_rechunk\": True},\n)\n\n\nds_ag\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 10kB\nDimensions:  (lat: 40, lon: 60)\nCoordinates:\n  * lat      (lat) int64 320B 0 1 2 3 4 5 6 7 8 9 ... 31 32 33 34 35 36 37 38 39\n  * lon      (lon) int64 480B 0 1 2 3 4 5 6 7 8 9 ... 51 52 53 54 55 56 57 58 59\nData variables:\n    test     (lat, lon) float32 10kB dask.array<chunksize=(4, 6), meta=np.ndarray>xarray.DatasetDimensions:lat: 40lon: 60Coordinates: (2)lat(lat)int640 1 2 3 4 5 6 ... 34 35 36 37 38 39array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39])lon(lon)int640 1 2 3 4 5 6 ... 54 55 56 57 58 59array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59])Data variables: (1)test(lat, lon)float32dask.array<chunksize=(4, 6), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         9.38 kiB \n                         96 B \n                    \n                    \n                    \n                         Shape \n                         (40, 60) \n                         (4, 6) \n                    \n                    \n                         Dask graph \n                         100 chunks in 4 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  60\n  40\n\n        \n    \nIndexes: (2)latPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39],\n      dtype='int64', name='lat'))lonPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59],\n      dtype='int64', name='lon'))Attributes: (0)\n\n\n\nds_ag.compute()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 10kB\nDimensions:  (lat: 40, lon: 60)\nCoordinates:\n  * lat      (lat) int64 320B 0 1 2 3 4 5 6 7 8 9 ... 31 32 33 34 35 36 37 38 39\n  * lon      (lon) int64 480B 0 1 2 3 4 5 6 7 8 9 ... 51 52 53 54 55 56 57 58 59\nData variables:\n    test     (lat, lon) float32 10kB 0.0 1.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 0.0 0.0xarray.DatasetDimensions:lat: 40lon: 60Coordinates: (2)lat(lat)int640 1 2 3 4 5 6 ... 34 35 36 37 38 39array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39])lon(lon)int640 1 2 3 4 5 6 ... 54 55 56 57 58 59array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59])Data variables: (1)test(lat, lon)float320.0 1.0 1.0 1.0 ... 1.0 1.0 0.0 0.0array([[0., 1., 1., ..., 1., 1., 0.],\n       [1., 1., 0., ..., 0., 1., 0.],\n       [0., 0., 1., ..., 1., 0., 1.],\n       ...,\n       [0., 0., 0., ..., 1., 0., 1.],\n       [0., 0., 1., ..., 0., 0., 0.],\n       [0., 1., 0., ..., 1., 0., 0.]], shape=(40, 60), dtype=float32)Indexes: (2)latPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39],\n      dtype='int64', name='lat'))lonPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59],\n      dtype='int64', name='lon'))Attributes: (0)"
  },
  {
    "objectID": "code-snippets/xarray/util.html",
    "href": "code-snippets/xarray/util.html",
    "title": "util.py",
    "section": "",
    "text": "Just a helper to generate some data for training and inference.\nimport pandas as pd\nimport dask.array as da\nimport xarray as xr\n\n\ndef generate_X_y(\n    samples=1000, features=10, classes=2\n) -> tuple[da.core.Array, da.core.Array]:\n    \"\"\"Generate random features and labels\n\n    Parameters\n    ----------\n    samples : int, optional\n        Number of samples, by default 1000\n    features : int, optional\n        Number of features, by default 10\n    classes : int, optional\n        Number of classes, by default 2\n\n    Returns\n    -------\n    tuple[da.core.Array, da.core.Array]\n        X and y, with shape (samples, features) and (samples,)\n    \"\"\"\n    X = da.random.random((samples, features))\n    y = da.random.randint(0, classes, samples)\n\n    return X, y\n\n\ndef generate_3d_dataset(lat=40, lon=60, time=12) -> xr.Dataset:\n    \"\"\"Generate a 3-dimensional xarray.Dataset with lat, lon and time dimensions of\n    the specified size. lat/lon chunks will be int(dim.size/10), time will be a single chunk (-1)\n\n    Parameters\n    ----------\n    lat : int, optional\n        Size of lat dimension, by default 40\n    lon : int, optional\n        Size of lon dimension, by default 60\n    time : int, optional\n        Size of time dimension, by default 12\n\n    Returns\n    -------\n    xr.Dataset\n        Dask-backed dataset.\n    \"\"\"\n    lat_chunk, lon_chunk = int(lat / 10), int(lon / 10)\n    lat_coords = da.arange(lat)\n    lon_coords = da.arange(lon)\n    start = pd.Timestamp(year=2021, month=1, day=1)\n    time_coords = pd.date_range(start, start + pd.Timedelta(days=time - 1), freq=\"1D\")\n    data = da.random.random(\n        (lat_coords.size, lon_coords.size, time_coords.size),\n        chunks=(lat_chunk, lon_chunk, -1),\n    )\n\n    ds = xr.DataArray(\n        data,\n        coords=[lat_coords, lon_coords, time_coords],\n        dims=[\"lat\", \"lon\", \"time\"],\n        name=\"test\",\n    ).to_dataset()\n\n    return ds"
  },
  {
    "objectID": "code-snippets/xarray/02_resample_custom_func.html#some-random-data",
    "href": "code-snippets/xarray/02_resample_custom_func.html#some-random-data",
    "title": "Temporal resampling/aggregation",
    "section": "Some random data",
    "text": "Some random data\n\nlat = 40\nlon = 60\ntime = 120\n\nds = generate_3d_dataset(lat, lon, time)\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<xarray.Dataset> Size: 2MB\nDimensions:  (lat: 40, lon: 60, time: 120)\nCoordinates:\n  * lat      (lat) int64 320B 0 1 2 3 4 5 6 7 8 9 ... 31 32 33 34 35 36 37 38 39\n  * lon      (lon) int64 480B 0 1 2 3 4 5 6 7 8 9 ... 51 52 53 54 55 56 57 58 59\n  * time     (time) datetime64[ns] 960B 2021-01-01 2021-01-02 ... 2021-04-30\nData variables:\n    test     (lat, lon, time) float64 2MB dask.array<chunksize=(4, 6, 120), meta=np.ndarray>xarray.DatasetDimensions:lat: 40lon: 60time: 120Coordinates: (3)lat(lat)int640 1 2 3 4 5 6 ... 34 35 36 37 38 39array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39])lon(lon)int640 1 2 3 4 5 6 ... 54 55 56 57 58 59array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59])time(time)datetime64[ns]2021-01-01 ... 2021-04-30array(['2021-01-01T00:00:00.000000000', '2021-01-02T00:00:00.000000000',\n       '2021-01-03T00:00:00.000000000', '2021-01-04T00:00:00.000000000',\n       '2021-01-05T00:00:00.000000000', '2021-01-06T00:00:00.000000000',\n       '2021-01-07T00:00:00.000000000', '2021-01-08T00:00:00.000000000',\n       '2021-01-09T00:00:00.000000000', '2021-01-10T00:00:00.000000000',\n       '2021-01-11T00:00:00.000000000', '2021-01-12T00:00:00.000000000',\n       '2021-01-13T00:00:00.000000000', '2021-01-14T00:00:00.000000000',\n       '2021-01-15T00:00:00.000000000', '2021-01-16T00:00:00.000000000',\n       '2021-01-17T00:00:00.000000000', '2021-01-18T00:00:00.000000000',\n       '2021-01-19T00:00:00.000000000', '2021-01-20T00:00:00.000000000',\n       '2021-01-21T00:00:00.000000000', '2021-01-22T00:00:00.000000000',\n       '2021-01-23T00:00:00.000000000', '2021-01-24T00:00:00.000000000',\n       '2021-01-25T00:00:00.000000000', '2021-01-26T00:00:00.000000000',\n       '2021-01-27T00:00:00.000000000', '2021-01-28T00:00:00.000000000',\n       '2021-01-29T00:00:00.000000000', '2021-01-30T00:00:00.000000000',\n       '2021-01-31T00:00:00.000000000', '2021-02-01T00:00:00.000000000',\n       '2021-02-02T00:00:00.000000000', '2021-02-03T00:00:00.000000000',\n       '2021-02-04T00:00:00.000000000', '2021-02-05T00:00:00.000000000',\n       '2021-02-06T00:00:00.000000000', '2021-02-07T00:00:00.000000000',\n       '2021-02-08T00:00:00.000000000', '2021-02-09T00:00:00.000000000',\n       '2021-02-10T00:00:00.000000000', '2021-02-11T00:00:00.000000000',\n       '2021-02-12T00:00:00.000000000', '2021-02-13T00:00:00.000000000',\n       '2021-02-14T00:00:00.000000000', '2021-02-15T00:00:00.000000000',\n       '2021-02-16T00:00:00.000000000', '2021-02-17T00:00:00.000000000',\n       '2021-02-18T00:00:00.000000000', '2021-02-19T00:00:00.000000000',\n       '2021-02-20T00:00:00.000000000', '2021-02-21T00:00:00.000000000',\n       '2021-02-22T00:00:00.000000000', '2021-02-23T00:00:00.000000000',\n       '2021-02-24T00:00:00.000000000', '2021-02-25T00:00:00.000000000',\n       '2021-02-26T00:00:00.000000000', '2021-02-27T00:00:00.000000000',\n       '2021-02-28T00:00:00.000000000', '2021-03-01T00:00:00.000000000',\n       '2021-03-02T00:00:00.000000000', '2021-03-03T00:00:00.000000000',\n       '2021-03-04T00:00:00.000000000', '2021-03-05T00:00:00.000000000',\n       '2021-03-06T00:00:00.000000000', '2021-03-07T00:00:00.000000000',\n       '2021-03-08T00:00:00.000000000', '2021-03-09T00:00:00.000000000',\n       '2021-03-10T00:00:00.000000000', '2021-03-11T00:00:00.000000000',\n       '2021-03-12T00:00:00.000000000', '2021-03-13T00:00:00.000000000',\n       '2021-03-14T00:00:00.000000000', '2021-03-15T00:00:00.000000000',\n       '2021-03-16T00:00:00.000000000', '2021-03-17T00:00:00.000000000',\n       '2021-03-18T00:00:00.000000000', '2021-03-19T00:00:00.000000000',\n       '2021-03-20T00:00:00.000000000', '2021-03-21T00:00:00.000000000',\n       '2021-03-22T00:00:00.000000000', '2021-03-23T00:00:00.000000000',\n       '2021-03-24T00:00:00.000000000', '2021-03-25T00:00:00.000000000',\n       '2021-03-26T00:00:00.000000000', '2021-03-27T00:00:00.000000000',\n       '2021-03-28T00:00:00.000000000', '2021-03-29T00:00:00.000000000',\n       '2021-03-30T00:00:00.000000000', '2021-03-31T00:00:00.000000000',\n       '2021-04-01T00:00:00.000000000', '2021-04-02T00:00:00.000000000',\n       '2021-04-03T00:00:00.000000000', '2021-04-04T00:00:00.000000000',\n       '2021-04-05T00:00:00.000000000', '2021-04-06T00:00:00.000000000',\n       '2021-04-07T00:00:00.000000000', '2021-04-08T00:00:00.000000000',\n       '2021-04-09T00:00:00.000000000', '2021-04-10T00:00:00.000000000',\n       '2021-04-11T00:00:00.000000000', '2021-04-12T00:00:00.000000000',\n       '2021-04-13T00:00:00.000000000', '2021-04-14T00:00:00.000000000',\n       '2021-04-15T00:00:00.000000000', '2021-04-16T00:00:00.000000000',\n       '2021-04-17T00:00:00.000000000', '2021-04-18T00:00:00.000000000',\n       '2021-04-19T00:00:00.000000000', '2021-04-20T00:00:00.000000000',\n       '2021-04-21T00:00:00.000000000', '2021-04-22T00:00:00.000000000',\n       '2021-04-23T00:00:00.000000000', '2021-04-24T00:00:00.000000000',\n       '2021-04-25T00:00:00.000000000', '2021-04-26T00:00:00.000000000',\n       '2021-04-27T00:00:00.000000000', '2021-04-28T00:00:00.000000000',\n       '2021-04-29T00:00:00.000000000', '2021-04-30T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (1)test(lat, lon, time)float64dask.array<chunksize=(4, 6, 120), meta=np.ndarray>\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.20 MiB \n                         22.50 kiB \n                    \n                    \n                    \n                         Shape \n                         (40, 60, 120) \n                         (4, 6, 120) \n                    \n                    \n                         Dask graph \n                         100 chunks in 1 graph layer \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  120\n  60\n  40\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39],\n      dtype='int64', name='lat'))lonPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59],\n      dtype='int64', name='lon'))timePandasIndexPandasIndex(DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04',\n               '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08',\n               '2021-01-09', '2021-01-10',\n               ...\n               '2021-04-21', '2021-04-22', '2021-04-23', '2021-04-24',\n               '2021-04-25', '2021-04-26', '2021-04-27', '2021-04-28',\n               '2021-04-29', '2021-04-30'],\n              dtype='datetime64[ns]', name='time', length=120, freq='D'))Attributes: (0)"
  },
  {
    "objectID": "code-snippets/xarray/02_resample_custom_func.html#resample-to-monthly-interval",
    "href": "code-snippets/xarray/02_resample_custom_func.html#resample-to-monthly-interval",
    "title": "Temporal resampling/aggregation",
    "section": "Resample to monthly interval",
    "text": "Resample to monthly interval\n\nda_monthly_mean = ds.test.resample(time=\"1MS\").mean()\n\n\ndef custom_agg_func(da: xr.DataArray) -> xr.DataArray:\n    # dummy operation - could by anything\n    return da.sum(dim=\"time\") / da.count(dim=\"time\")\n\n\nda_monthly_mean_custom = ds.test.resample(time=\"1MS\").apply(custom_agg_func)\n\n\nassert (da_monthly_mean_custom == da_monthly_mean).all()"
  }
]